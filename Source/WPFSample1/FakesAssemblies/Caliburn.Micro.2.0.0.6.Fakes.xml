<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Caliburn.Micro.2.0.0.6.Fakes</name>
    </assembly>
    <members>
        <member name="T:Caliburn.Micro.Fakes.ShimActivationEventArgs">
            <summary>Shim type of Caliburn.Micro.ActivationEventArgs</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimActivationEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimActivationEventArgs.#ctor(Caliburn.Micro.ActivationEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimActivationEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimActivationEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimActivationEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimActivationEventArgs.Constructor">
            <summary>Sets the shim of ActivationEventArgs.ActivationEventArgs()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimActivationEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimActivationProcessedEventArgs">
            <summary>Shim type of Caliburn.Micro.ActivationProcessedEventArgs</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimActivationProcessedEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimActivationProcessedEventArgs.#ctor(Caliburn.Micro.ActivationProcessedEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimActivationProcessedEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimActivationProcessedEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimActivationProcessedEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimActivationProcessedEventArgs.Constructor">
            <summary>Sets the shim of ActivationProcessedEventArgs.ActivationProcessedEventArgs()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimActivationProcessedEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimBindableCollection`1">
            <summary>Shim type of Caliburn.Micro.BindableCollection`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimBindableCollection`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimBindableCollection`1.#ctor(Caliburn.Micro.BindableCollection{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimBindableCollection`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimBindableCollection`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimBindableCollection`1.Bind(Caliburn.Micro.INotifyPropertyChangedEx)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimBindableCollection`1.Bind(Caliburn.Micro.IObservableCollection{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimBindableCollection`1.Bind(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimBindableCollection`1.Bind(System.ComponentModel.INotifyPropertyChanged)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimBindableCollection`1.Bind(System.Collections.ICollection)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimBindableCollection`1.Bind(System.Collections.IEnumerable)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimBindableCollection`1.Bind(System.Collections.IList)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimBindableCollection`1.Bind(System.Collections.Generic.ICollection{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimBindableCollection`1.Bind(System.Collections.Generic.IEnumerable{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimBindableCollection`1.Bind(System.Collections.Generic.IList{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.AddRangeIEnumerableOfT0">
            <summary>Sets the shim of BindableCollection`1.AddRange(IEnumerable`1&lt;!0&gt; items)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.ClearItems">
            <summary>Sets the shim of BindableCollection`1.ClearItems()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.ClearItemsBase">
            <summary>Sets the shim of BindableCollection`1.ClearItemsBase()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.Constructor">
            <summary>Sets the shim of BindableCollection`1.BindableCollection`1()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.ConstructorIEnumerableOfT0">
            <summary>Sets the shim of BindableCollection`1.BindableCollection`1(IEnumerable`1&lt;!0&gt; collection)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.InsertItemBaseInt32T0">
            <summary>Sets the shim of BindableCollection`1.InsertItemBase(Int32 index, !0 item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.InsertItemInt32T0">
            <summary>Sets the shim of BindableCollection`1.InsertItem(Int32 index, !0 item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.IsNotifyingGet">
            <summary>Sets the shim of BindableCollection`1.get_IsNotifying()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.IsNotifyingSetBoolean">
            <summary>Sets the shim of BindableCollection`1.set_IsNotifying(Boolean value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.NotifyOfPropertyChangeString">
            <summary>Sets the shim of BindableCollection`1.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.OnCollectionChangedNotifyCollectionChangedEventArgs">
            <summary>Sets the shim of BindableCollection`1.OnCollectionChanged(NotifyCollectionChangedEventArgs e)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.OnPropertyChangedPropertyChangedEventArgs">
            <summary>Sets the shim of BindableCollection`1.OnPropertyChanged(PropertyChangedEventArgs e)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.Refresh">
            <summary>Sets the shim of BindableCollection`1.Refresh()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.RemoveItemBaseInt32">
            <summary>Sets the shim of BindableCollection`1.RemoveItemBase(Int32 index)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.RemoveItemInt32">
            <summary>Sets the shim of BindableCollection`1.RemoveItem(Int32 index)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.RemoveRangeIEnumerableOfT0">
            <summary>Sets the shim of BindableCollection`1.RemoveRange(IEnumerable`1&lt;!0&gt; items)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.SetItemBaseInt32T0">
            <summary>Sets the shim of BindableCollection`1.SetItemBase(Int32 index, !0 item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.SetItemInt32T0">
            <summary>Sets the shim of BindableCollection`1.SetItem(Int32 index, !0 item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1._Refreshb__3">
            <summary>Sets the shim of BindableCollection`1.&lt;Refresh&gt;b__3()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimBindableCollection`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.AllInstances.AddRangeIEnumerableOfT0">
            <summary>Sets the shim of BindableCollection`1.AddRange(IEnumerable`1&lt;!0&gt; items)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.AllInstances.ClearItems">
            <summary>Sets the shim of BindableCollection`1.ClearItems()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.AllInstances.ClearItemsBase">
            <summary>Sets the shim of BindableCollection`1.ClearItemsBase()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.AllInstances.InsertItemBaseInt32T0">
            <summary>Sets the shim of BindableCollection`1.InsertItemBase(Int32 index, !0 item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.AllInstances.InsertItemInt32T0">
            <summary>Sets the shim of BindableCollection`1.InsertItem(Int32 index, !0 item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.AllInstances.IsNotifyingGet">
            <summary>Sets the shim of BindableCollection`1.get_IsNotifying()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.AllInstances.IsNotifyingSetBoolean">
            <summary>Sets the shim of BindableCollection`1.set_IsNotifying(Boolean value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.AllInstances.NotifyOfPropertyChangeString">
            <summary>Sets the shim of BindableCollection`1.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.AllInstances.OnCollectionChangedNotifyCollectionChangedEventArgs">
            <summary>Sets the shim of BindableCollection`1.OnCollectionChanged(NotifyCollectionChangedEventArgs e)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.AllInstances.OnPropertyChangedPropertyChangedEventArgs">
            <summary>Sets the shim of BindableCollection`1.OnPropertyChanged(PropertyChangedEventArgs e)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.AllInstances.Refresh">
            <summary>Sets the shim of BindableCollection`1.Refresh()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.AllInstances.RemoveItemBaseInt32">
            <summary>Sets the shim of BindableCollection`1.RemoveItemBase(Int32 index)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.AllInstances.RemoveItemInt32">
            <summary>Sets the shim of BindableCollection`1.RemoveItem(Int32 index)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.AllInstances.RemoveRangeIEnumerableOfT0">
            <summary>Sets the shim of BindableCollection`1.RemoveRange(IEnumerable`1&lt;!0&gt; items)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.AllInstances.SetItemBaseInt32T0">
            <summary>Sets the shim of BindableCollection`1.SetItemBase(Int32 index, !0 item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.AllInstances.SetItemInt32T0">
            <summary>Sets the shim of BindableCollection`1.SetItem(Int32 index, !0 item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimBindableCollection`1.AllInstances._Refreshb__3">
            <summary>Sets the shim of BindableCollection`1.&lt;Refresh&gt;b__3()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimConductor`1">
            <summary>Shim type of Caliburn.Micro.Conductor`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.#ctor(Caliburn.Micro.Conductor{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.Bind(Caliburn.Micro.IActivate)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.Bind(Caliburn.Micro.IChild)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.Bind(Caliburn.Micro.IClose)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.Bind(Caliburn.Micro.IConductActiveItem)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.Bind(Caliburn.Micro.IConductor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.Bind(Caliburn.Micro.IDeactivate)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.Bind(Caliburn.Micro.IGuardClose)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.Bind(Caliburn.Micro.IHaveActiveItem)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.Bind(Caliburn.Micro.IHaveDisplayName)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.Bind(Caliburn.Micro.INotifyPropertyChangedEx)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.Bind(Caliburn.Micro.IParent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.Bind(Caliburn.Micro.IScreen)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.Bind(Caliburn.Micro.IViewAware)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.Bind(Caliburn.Micro.IParent{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.Bind(System.ComponentModel.INotifyPropertyChanged)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ActivateItemT0">
            <summary>Sets the shim of Conductor`1.ActivateItem(!0 item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.CanCloseActionOfBoolean">
            <summary>Sets the shim of Conductor`1.CanClose(Action`1&lt;Boolean&gt; callback)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.Constructor">
            <summary>Sets the shim of Conductor`1.Conductor`1()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.DeactivateItemT0Boolean">
            <summary>Sets the shim of Conductor`1.DeactivateItem(!0 item, Boolean close)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.GetChildren">
            <summary>Sets the shim of Conductor`1.GetChildren()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.OnActivate">
            <summary>Sets the shim of Conductor`1.OnActivate()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.OnDeactivateBoolean">
            <summary>Sets the shim of Conductor`1.OnDeactivate(Boolean close)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimConductor`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.AllInstances.ActivateItemT0">
            <summary>Sets the shim of Conductor`1.ActivateItem(!0 item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.AllInstances.CanCloseActionOfBoolean">
            <summary>Sets the shim of Conductor`1.CanClose(Action`1&lt;Boolean&gt; callback)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.AllInstances.DeactivateItemT0Boolean">
            <summary>Sets the shim of Conductor`1.DeactivateItem(!0 item, Boolean close)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.AllInstances.GetChildren">
            <summary>Sets the shim of Conductor`1.GetChildren()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.AllInstances.OnActivate">
            <summary>Sets the shim of Conductor`1.OnActivate()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.AllInstances.OnDeactivateBoolean">
            <summary>Sets the shim of Conductor`1.OnDeactivate(Boolean close)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection">
            <summary>Shim type of Caliburn.Micro.Conductor`1+Collection</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.#ctor(Caliburn.Micro.Conductor{`0}.Collection)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.Constructor">
            <summary>Sets the shim of Collection.Collection()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive">
            <summary>Shim type of Caliburn.Micro.Conductor`1+Collection+AllActive</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.#ctor(Caliburn.Micro.Conductor{`0}.Collection.AllActive)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.Bind(Caliburn.Micro.IActivate)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.Bind(Caliburn.Micro.IChild)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.Bind(Caliburn.Micro.IClose)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.Bind(Caliburn.Micro.IConductor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.Bind(Caliburn.Micro.IDeactivate)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.Bind(Caliburn.Micro.IGuardClose)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.Bind(Caliburn.Micro.IHaveDisplayName)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.Bind(Caliburn.Micro.INotifyPropertyChangedEx)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.Bind(Caliburn.Micro.IParent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.Bind(Caliburn.Micro.IScreen)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.Bind(Caliburn.Micro.IViewAware)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.Bind(Caliburn.Micro.IParent{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.Bind(System.ComponentModel.INotifyPropertyChanged)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.ActivateItemT0">
            <summary>Sets the shim of AllActive.ActivateItem(!0 item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.CanCloseActionOfBoolean">
            <summary>Sets the shim of AllActive.CanClose(Action`1&lt;Boolean&gt; callback)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.CloseItemCoreT0">
            <summary>Sets the shim of AllActive.CloseItemCore(!0 item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.Constructor">
            <summary>Sets the shim of AllActive.AllActive()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.ConstructorBoolean">
            <summary>Sets the shim of AllActive.AllActive(Boolean openPublicItems)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.DeactivateItemT0Boolean">
            <summary>Sets the shim of AllActive.DeactivateItem(!0 item, Boolean close)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.EnsureItemT0">
            <summary>Sets the shim of AllActive.EnsureItem(!0 newItem)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.GetChildren">
            <summary>Sets the shim of AllActive.GetChildren()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.ItemsGet">
            <summary>Sets the shim of AllActive.get_Items()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.OnActivate">
            <summary>Sets the shim of AllActive.OnActivate()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.OnDeactivateBoolean">
            <summary>Sets the shim of AllActive.OnDeactivate(Boolean close)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.OnInitialize">
            <summary>Sets the shim of AllActive.OnInitialize()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive._OnActivateb__2dIActivate">
            <summary>Sets the shim of AllActive.&lt;OnActivate&gt;b__2d(IActivate x)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive._OnInitializeb__37PropertyInfo">
            <summary>Sets the shim of AllActive.&lt;OnInitialize&gt;b__37(PropertyInfo x)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive._OnInitializeb__38PropertyInfo">
            <summary>Sets the shim of AllActive.&lt;OnInitialize&gt;b__38(PropertyInfo x)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive._ctorb__21ObjectNotifyCollectionChangedEventArgs">
            <summary>Sets the shim of AllActive.&lt;.ctor&gt;b__21(Object s, NotifyCollectionChangedEventArgs e)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive._ctorb__22IChild">
            <summary>Sets the shim of AllActive.&lt;.ctor&gt;b__22(IChild x)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive._ctorb__23IChild">
            <summary>Sets the shim of AllActive.&lt;.ctor&gt;b__23(IChild x)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive._ctorb__24IChild">
            <summary>Sets the shim of AllActive.&lt;.ctor&gt;b__24(IChild x)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive._ctorb__25IChild">
            <summary>Sets the shim of AllActive.&lt;.ctor&gt;b__25(IChild x)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive._ctorb__26IChild">
            <summary>Sets the shim of AllActive.&lt;.ctor&gt;b__26(IChild x)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.AllInstances.ActivateItemT0">
            <summary>Sets the shim of AllActive.ActivateItem(!0 item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.AllInstances.CanCloseActionOfBoolean">
            <summary>Sets the shim of AllActive.CanClose(Action`1&lt;Boolean&gt; callback)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.AllInstances.CloseItemCoreT0">
            <summary>Sets the shim of AllActive.CloseItemCore(!0 item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.AllInstances.DeactivateItemT0Boolean">
            <summary>Sets the shim of AllActive.DeactivateItem(!0 item, Boolean close)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.AllInstances.EnsureItemT0">
            <summary>Sets the shim of AllActive.EnsureItem(!0 newItem)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.AllInstances.GetChildren">
            <summary>Sets the shim of AllActive.GetChildren()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.AllInstances.ItemsGet">
            <summary>Sets the shim of AllActive.get_Items()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.AllInstances.OnActivate">
            <summary>Sets the shim of AllActive.OnActivate()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.AllInstances.OnDeactivateBoolean">
            <summary>Sets the shim of AllActive.OnDeactivate(Boolean close)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.AllInstances.OnInitialize">
            <summary>Sets the shim of AllActive.OnInitialize()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.AllInstances._OnInitializeb__38PropertyInfo">
            <summary>Sets the shim of AllActive.&lt;OnInitialize&gt;b__38(PropertyInfo x)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.AllInstances._ctorb__21ObjectNotifyCollectionChangedEventArgs">
            <summary>Sets the shim of AllActive.&lt;.ctor&gt;b__21(Object s, NotifyCollectionChangedEventArgs e)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.AllInstances._ctorb__22IChild">
            <summary>Sets the shim of AllActive.&lt;.ctor&gt;b__22(IChild x)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.AllInstances._ctorb__24IChild">
            <summary>Sets the shim of AllActive.&lt;.ctor&gt;b__24(IChild x)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimAllActive.AllInstances._ctorb__26IChild">
            <summary>Sets the shim of AllActive.&lt;.ctor&gt;b__26(IChild x)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive">
            <summary>Shim type of Caliburn.Micro.Conductor`1+Collection+OneActive</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.#ctor(Caliburn.Micro.Conductor{`0}.Collection.OneActive)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.Bind(Caliburn.Micro.IActivate)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.Bind(Caliburn.Micro.IChild)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.Bind(Caliburn.Micro.IClose)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.Bind(Caliburn.Micro.IConductActiveItem)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.Bind(Caliburn.Micro.IConductor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.Bind(Caliburn.Micro.IDeactivate)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.Bind(Caliburn.Micro.IGuardClose)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.Bind(Caliburn.Micro.IHaveActiveItem)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.Bind(Caliburn.Micro.IHaveDisplayName)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.Bind(Caliburn.Micro.INotifyPropertyChangedEx)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.Bind(Caliburn.Micro.IParent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.Bind(Caliburn.Micro.IScreen)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.Bind(Caliburn.Micro.IViewAware)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.Bind(Caliburn.Micro.IParent{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.Bind(System.ComponentModel.INotifyPropertyChanged)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.ActivateItemT0">
            <summary>Sets the shim of OneActive.ActivateItem(!0 item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.CanCloseActionOfBoolean">
            <summary>Sets the shim of OneActive.CanClose(Action`1&lt;Boolean&gt; callback)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.CloseItemCoreT0">
            <summary>Sets the shim of OneActive.CloseItemCore(!0 item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.Constructor">
            <summary>Sets the shim of OneActive.OneActive()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.DeactivateItemT0Boolean">
            <summary>Sets the shim of OneActive.DeactivateItem(!0 item, Boolean close)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.DetermineNextItemToActivateIListOfT0Int32">
            <summary>Sets the shim of OneActive.DetermineNextItemToActivate(IList`1&lt;!0&gt; list, Int32 lastIndex)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.EnsureItemT0">
            <summary>Sets the shim of OneActive.EnsureItem(!0 newItem)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.GetChildren">
            <summary>Sets the shim of OneActive.GetChildren()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.ItemsGet">
            <summary>Sets the shim of OneActive.get_Items()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.OnActivate">
            <summary>Sets the shim of OneActive.OnActivate()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.OnDeactivateBoolean">
            <summary>Sets the shim of OneActive.OnDeactivate(Boolean close)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive._OnDeactivateb__54IDeactivate">
            <summary>Sets the shim of OneActive.&lt;OnDeactivate&gt;b__54(IDeactivate x)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive._ctorb__3fObjectNotifyCollectionChangedEventArgs">
            <summary>Sets the shim of OneActive.&lt;.ctor&gt;b__3f(Object s, NotifyCollectionChangedEventArgs e)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive._ctorb__40IChild">
            <summary>Sets the shim of OneActive.&lt;.ctor&gt;b__40(IChild x)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive._ctorb__41IChild">
            <summary>Sets the shim of OneActive.&lt;.ctor&gt;b__41(IChild x)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive._ctorb__42IChild">
            <summary>Sets the shim of OneActive.&lt;.ctor&gt;b__42(IChild x)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive._ctorb__43IChild">
            <summary>Sets the shim of OneActive.&lt;.ctor&gt;b__43(IChild x)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive._ctorb__44IChild">
            <summary>Sets the shim of OneActive.&lt;.ctor&gt;b__44(IChild x)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.AllInstances.ActivateItemT0">
            <summary>Sets the shim of OneActive.ActivateItem(!0 item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.AllInstances.CanCloseActionOfBoolean">
            <summary>Sets the shim of OneActive.CanClose(Action`1&lt;Boolean&gt; callback)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.AllInstances.CloseItemCoreT0">
            <summary>Sets the shim of OneActive.CloseItemCore(!0 item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.AllInstances.DeactivateItemT0Boolean">
            <summary>Sets the shim of OneActive.DeactivateItem(!0 item, Boolean close)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.AllInstances.DetermineNextItemToActivateIListOfT0Int32">
            <summary>Sets the shim of OneActive.DetermineNextItemToActivate(IList`1&lt;!0&gt; list, Int32 lastIndex)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.AllInstances.EnsureItemT0">
            <summary>Sets the shim of OneActive.EnsureItem(!0 newItem)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.AllInstances.GetChildren">
            <summary>Sets the shim of OneActive.GetChildren()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.AllInstances.ItemsGet">
            <summary>Sets the shim of OneActive.get_Items()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.AllInstances.OnActivate">
            <summary>Sets the shim of OneActive.OnActivate()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.AllInstances.OnDeactivateBoolean">
            <summary>Sets the shim of OneActive.OnDeactivate(Boolean close)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.AllInstances._ctorb__3fObjectNotifyCollectionChangedEventArgs">
            <summary>Sets the shim of OneActive.&lt;.ctor&gt;b__3f(Object s, NotifyCollectionChangedEventArgs e)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.AllInstances._ctorb__40IChild">
            <summary>Sets the shim of OneActive.&lt;.ctor&gt;b__40(IChild x)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.AllInstances._ctorb__42IChild">
            <summary>Sets the shim of OneActive.&lt;.ctor&gt;b__42(IChild x)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductor`1.ShimCollection.ShimOneActive.AllInstances._ctorb__44IChild">
            <summary>Sets the shim of OneActive.&lt;.ctor&gt;b__44(IChild x)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimConductorBase`1">
            <summary>Shim type of Caliburn.Micro.ConductorBase`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBase`1.#ctor(Caliburn.Micro.ConductorBase{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBase`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBase`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBase`1.Bind(Caliburn.Micro.IActivate)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBase`1.Bind(Caliburn.Micro.IChild)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBase`1.Bind(Caliburn.Micro.IClose)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBase`1.Bind(Caliburn.Micro.IConductor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBase`1.Bind(Caliburn.Micro.IDeactivate)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBase`1.Bind(Caliburn.Micro.IGuardClose)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBase`1.Bind(Caliburn.Micro.IHaveDisplayName)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBase`1.Bind(Caliburn.Micro.INotifyPropertyChangedEx)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBase`1.Bind(Caliburn.Micro.IParent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBase`1.Bind(Caliburn.Micro.IScreen)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBase`1.Bind(Caliburn.Micro.IViewAware)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBase`1.Bind(Caliburn.Micro.IParent{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBase`1.Bind(System.ComponentModel.INotifyPropertyChanged)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBase`1.ActivationProcessedAddEventHandlerOfActivationProcessedEventArgs">
            <summary>Sets the shim of ConductorBase`1.add_ActivationProcessed(EventHandler`1&lt;ActivationProcessedEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBase`1.ActivationProcessedRemoveEventHandlerOfActivationProcessedEventArgs">
            <summary>Sets the shim of ConductorBase`1.remove_ActivationProcessed(EventHandler`1&lt;ActivationProcessedEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBase`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBase`1.CaliburnMicroIConductorActivateItemObject">
            <summary>Sets the shim of ConductorBase`1.Caliburn.Micro.IConductor.ActivateItem(Object item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBase`1.CaliburnMicroIConductorDeactivateItemObjectBoolean">
            <summary>Sets the shim of ConductorBase`1.Caliburn.Micro.IConductor.DeactivateItem(Object item, Boolean close)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBase`1.CaliburnMicroIParentGetChildren">
            <summary>Sets the shim of ConductorBase`1.Caliburn.Micro.IParent.GetChildren()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBase`1.CloseStrategyGet">
            <summary>Sets the shim of ConductorBase`1.get_CloseStrategy()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBase`1.CloseStrategySetICloseStrategyOfT0">
            <summary>Sets the shim of ConductorBase`1.set_CloseStrategy(ICloseStrategy`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBase`1.Constructor">
            <summary>Sets the shim of ConductorBase`1.ConductorBase`1()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBase`1.EnsureItemT0">
            <summary>Sets the shim of ConductorBase`1.EnsureItem(!0 newItem)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBase`1.OnActivationProcessedT0Boolean">
            <summary>Sets the shim of ConductorBase`1.OnActivationProcessed(!0 item, Boolean success)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBase`1._ctorb__16ObjectActivationProcessedEventArgs">
            <summary>Sets the shim of ConductorBase`1.&lt;.ctor&gt;b__16(Object param0, ActivationProcessedEventArgs param1)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimConductorBase`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBase`1.AllInstances.ActivationProcessedAddEventHandlerOfActivationProcessedEventArgs">
            <summary>Sets the shim of ConductorBase`1.add_ActivationProcessed(EventHandler`1&lt;ActivationProcessedEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBase`1.AllInstances.ActivationProcessedRemoveEventHandlerOfActivationProcessedEventArgs">
            <summary>Sets the shim of ConductorBase`1.remove_ActivationProcessed(EventHandler`1&lt;ActivationProcessedEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBase`1.AllInstances.CaliburnMicroIConductorActivateItemObject">
            <summary>Sets the shim of ConductorBase`1.Caliburn.Micro.IConductor.ActivateItem(Object item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBase`1.AllInstances.CaliburnMicroIConductorDeactivateItemObjectBoolean">
            <summary>Sets the shim of ConductorBase`1.Caliburn.Micro.IConductor.DeactivateItem(Object item, Boolean close)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBase`1.AllInstances.CaliburnMicroIParentGetChildren">
            <summary>Sets the shim of ConductorBase`1.Caliburn.Micro.IParent.GetChildren()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBase`1.AllInstances.CloseStrategyGet">
            <summary>Sets the shim of ConductorBase`1.get_CloseStrategy()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBase`1.AllInstances.CloseStrategySetICloseStrategyOfT0">
            <summary>Sets the shim of ConductorBase`1.set_CloseStrategy(ICloseStrategy`1&lt;!0&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBase`1.AllInstances.EnsureItemT0">
            <summary>Sets the shim of ConductorBase`1.EnsureItem(!0 newItem)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBase`1.AllInstances.OnActivationProcessedT0Boolean">
            <summary>Sets the shim of ConductorBase`1.OnActivationProcessed(!0 item, Boolean success)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1">
            <summary>Shim type of Caliburn.Micro.ConductorBaseWithActiveItem`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.#ctor(Caliburn.Micro.ConductorBaseWithActiveItem{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.Bind(Caliburn.Micro.IActivate)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.Bind(Caliburn.Micro.IChild)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.Bind(Caliburn.Micro.IClose)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.Bind(Caliburn.Micro.IConductActiveItem)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.Bind(Caliburn.Micro.IConductor)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.Bind(Caliburn.Micro.IDeactivate)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.Bind(Caliburn.Micro.IGuardClose)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.Bind(Caliburn.Micro.IHaveActiveItem)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.Bind(Caliburn.Micro.IHaveDisplayName)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.Bind(Caliburn.Micro.INotifyPropertyChangedEx)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.Bind(Caliburn.Micro.IParent)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.Bind(Caliburn.Micro.IScreen)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.Bind(Caliburn.Micro.IViewAware)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.Bind(Caliburn.Micro.IParent{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.Bind(System.ComponentModel.INotifyPropertyChanged)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.ActiveItemCaliburnMicroIHaveActiveItemget">
            <summary>Sets the shim of ConductorBaseWithActiveItem`1.Caliburn.Micro.IHaveActiveItem.get_ActiveItem()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.ActiveItemCaliburnMicroIHaveActiveItemsetObject">
            <summary>Sets the shim of ConductorBaseWithActiveItem`1.Caliburn.Micro.IHaveActiveItem.set_ActiveItem(Object value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.ActiveItemGet">
            <summary>Sets the shim of ConductorBaseWithActiveItem`1.get_ActiveItem()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.ActiveItemSetT0">
            <summary>Sets the shim of ConductorBaseWithActiveItem`1.set_ActiveItem(!0 value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.ChangeActiveItemT0Boolean">
            <summary>Sets the shim of ConductorBaseWithActiveItem`1.ChangeActiveItem(!0 newItem, Boolean closePrevious)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.Constructor">
            <summary>Sets the shim of ConductorBaseWithActiveItem`1.ConductorBaseWithActiveItem`1()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.AllInstances.ActiveItemCaliburnMicroIHaveActiveItemget">
            <summary>Sets the shim of ConductorBaseWithActiveItem`1.Caliburn.Micro.IHaveActiveItem.get_ActiveItem()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.AllInstances.ActiveItemCaliburnMicroIHaveActiveItemsetObject">
            <summary>Sets the shim of ConductorBaseWithActiveItem`1.Caliburn.Micro.IHaveActiveItem.set_ActiveItem(Object value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.AllInstances.ActiveItemGet">
            <summary>Sets the shim of ConductorBaseWithActiveItem`1.get_ActiveItem()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.AllInstances.ActiveItemSetT0">
            <summary>Sets the shim of ConductorBaseWithActiveItem`1.set_ActiveItem(!0 value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimConductorBaseWithActiveItem`1.AllInstances.ChangeActiveItemT0Boolean">
            <summary>Sets the shim of ConductorBaseWithActiveItem`1.ChangeActiveItem(!0 newItem, Boolean closePrevious)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimContainerExtensions">
            <summary>Shim type of Caliburn.Micro.ContainerExtensions</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimContainerExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimContainerExtensions.AllTypesOfOf1SimpleContainerAssemblyFuncOfTypeBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Caliburn.Micro.SimpleContainer,System.Reflection.Assembly,System.Func{System.Type,System.Boolean},Caliburn.Micro.SimpleContainer})">
            <summary>Sets the shim of ContainerExtensions.AllTypesOf(SimpleContainer container, Assembly assembly, Func`2&lt;Type,Boolean&gt; filter)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimContainerExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimContainerExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimContainerExtensions.GetAllInstancesOf1SimpleContainer``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Caliburn.Micro.SimpleContainer,System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of ContainerExtensions.GetAllInstances(SimpleContainer container)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimContainerExtensions.GetInstanceOf1SimpleContainerString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Caliburn.Micro.SimpleContainer,System.String,``0})">
            <summary>Sets the shim of ContainerExtensions.GetInstance(SimpleContainer container, String key)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimContainerExtensions.HandlerOf1SimpleContainerFuncOfSimpleContainerObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Caliburn.Micro.SimpleContainer,System.Func{Caliburn.Micro.SimpleContainer,System.Object},Caliburn.Micro.SimpleContainer})">
            <summary>Sets the shim of ContainerExtensions.Handler(SimpleContainer container, Func`2&lt;SimpleContainer,Object&gt; handler)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimContainerExtensions.InstanceOf1SimpleContainerM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Caliburn.Micro.SimpleContainer,``0,Caliburn.Micro.SimpleContainer})">
            <summary>Sets the shim of ContainerExtensions.Instance(SimpleContainer container, !!0 instance)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimContainerExtensions.PerRequestOf1SimpleContainerString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Caliburn.Micro.SimpleContainer,System.String,Caliburn.Micro.SimpleContainer})">
            <summary>Sets the shim of ContainerExtensions.PerRequest(SimpleContainer container, String key)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimContainerExtensions.PerRequestOf2SimpleContainerString``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Caliburn.Micro.SimpleContainer,System.String,Caliburn.Micro.SimpleContainer})">
            <summary>Sets the shim of ContainerExtensions.PerRequest(SimpleContainer container, String key)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimContainerExtensions.SingletonOf1SimpleContainerString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Caliburn.Micro.SimpleContainer,System.String,Caliburn.Micro.SimpleContainer})">
            <summary>Sets the shim of ContainerExtensions.Singleton(SimpleContainer container, String key)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimContainerExtensions.SingletonOf2SimpleContainerString``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Caliburn.Micro.SimpleContainer,System.String,Caliburn.Micro.SimpleContainer})">
            <summary>Sets the shim of ContainerExtensions.Singleton(SimpleContainer container, String key)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimContainerExtensions._AllTypesOfb__0Of1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.Boolean})">
            <summary>Sets the shim of ContainerExtensions.&lt;AllTypesOf&gt;b__0(Type type)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimContainerExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimContinueResultDecorator">
            <summary>Shim type of Caliburn.Micro.ContinueResultDecorator</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimContinueResultDecorator.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimContinueResultDecorator.#ctor(Caliburn.Micro.ContinueResultDecorator)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimContinueResultDecorator.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimContinueResultDecorator.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimContinueResultDecorator.Bind(Caliburn.Micro.IResult)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimContinueResultDecorator.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimContinueResultDecorator.ConstructorIResultFuncOfIResult">
            <summary>Sets the shim of ContinueResultDecorator.ContinueResultDecorator(IResult result, Func`1&lt;IResult&gt; coroutine)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimContinueResultDecorator.ContinueCompletedObjectResultCompletionEventArgs">
            <summary>Sets the shim of ContinueResultDecorator.ContinueCompleted(Object sender, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimContinueResultDecorator.ContinueCoroutineExecutionContext">
            <summary>Sets the shim of ContinueResultDecorator.Continue(CoroutineExecutionContext context)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimContinueResultDecorator.OnInnerResultCompletedCoroutineExecutionContextIResultResultCompletionEventArgs">
            <summary>Sets the shim of ContinueResultDecorator.OnInnerResultCompleted(CoroutineExecutionContext context, IResult innerResult, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimContinueResultDecorator.StaticConstructor">
            <summary>Sets the shim of ContinueResultDecorator.ContinueResultDecorator()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimContinueResultDecorator.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimContinueResultDecorator.AllInstances.ContinueCompletedObjectResultCompletionEventArgs">
            <summary>Sets the shim of ContinueResultDecorator.ContinueCompleted(Object sender, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimContinueResultDecorator.AllInstances.ContinueCoroutineExecutionContext">
            <summary>Sets the shim of ContinueResultDecorator.Continue(CoroutineExecutionContext context)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimContinueResultDecorator.AllInstances.OnInnerResultCompletedCoroutineExecutionContextIResultResultCompletionEventArgs">
            <summary>Sets the shim of ContinueResultDecorator.OnInnerResultCompleted(CoroutineExecutionContext context, IResult innerResult, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimCoroutine">
            <summary>Shim type of Caliburn.Micro.Coroutine</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimCoroutine.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimCoroutine.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimCoroutine.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimCoroutine.BeginExecuteIEnumeratorOfIResultCoroutineExecutionContextEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of Coroutine.BeginExecute(IEnumerator`1&lt;IResult&gt; coroutine, CoroutineExecutionContext context, EventHandler`1&lt;ResultCompletionEventArgs&gt; callback)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimCoroutine.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimCoroutine.CompletedAddEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of Coroutine.add_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimCoroutine.CompletedRemoveEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of Coroutine.remove_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimCoroutine.ExecuteAsyncIEnumeratorOfIResultCoroutineExecutionContext">
            <summary>Sets the shim of Coroutine.ExecuteAsync(IEnumerator`1&lt;IResult&gt; coroutine, CoroutineExecutionContext context)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimCoroutine.ExecuteOnCompletedIResultEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of Coroutine.ExecuteOnCompleted(IResult result, EventHandler`1&lt;ResultCompletionEventArgs&gt; handler)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimCoroutine.StaticConstructor">
            <summary>Sets the shim of Coroutine.Coroutine()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimCoroutine._cctorb__6IEnumeratorOfIResult">
            <summary>Sets the shim of Coroutine.&lt;.cctor&gt;b__6(IEnumerator`1&lt;IResult&gt; inner)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimCoroutine._cctorb__7ObjectResultCompletionEventArgs">
            <summary>Sets the shim of Coroutine.&lt;.cctor&gt;b__7(Object s, ResultCompletionEventArgs e)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimCoroutineExecutionContext">
            <summary>Shim type of Caliburn.Micro.CoroutineExecutionContext</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimCoroutineExecutionContext.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimCoroutineExecutionContext.#ctor(Caliburn.Micro.CoroutineExecutionContext)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimCoroutineExecutionContext.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimCoroutineExecutionContext.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimCoroutineExecutionContext.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimCoroutineExecutionContext.Constructor">
            <summary>Sets the shim of CoroutineExecutionContext.CoroutineExecutionContext()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimCoroutineExecutionContext.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimDeactivationEventArgs">
            <summary>Shim type of Caliburn.Micro.DeactivationEventArgs</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDeactivationEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDeactivationEventArgs.#ctor(Caliburn.Micro.DeactivationEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDeactivationEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDeactivationEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDeactivationEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDeactivationEventArgs.Constructor">
            <summary>Sets the shim of DeactivationEventArgs.DeactivationEventArgs()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimDeactivationEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimDebugLog">
            <summary>Shim type of Caliburn.Micro.DebugLog</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDebugLog.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDebugLog.#ctor(Caliburn.Micro.DebugLog)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDebugLog.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDebugLog.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDebugLog.Bind(Caliburn.Micro.ILog)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDebugLog.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDebugLog.ConstructorType">
            <summary>Sets the shim of DebugLog.DebugLog(Type type)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDebugLog.ErrorException">
            <summary>Sets the shim of DebugLog.Error(Exception exception)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDebugLog.InfoStringObjectArray">
            <summary>Sets the shim of DebugLog.Info(String format, Object[] args)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDebugLog.WarnStringObjectArray">
            <summary>Sets the shim of DebugLog.Warn(String format, Object[] args)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimDebugLog.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDebugLog.AllInstances.ErrorException">
            <summary>Sets the shim of DebugLog.Error(Exception exception)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDebugLog.AllInstances.InfoStringObjectArray">
            <summary>Sets the shim of DebugLog.Info(String format, Object[] args)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDebugLog.AllInstances.WarnStringObjectArray">
            <summary>Sets the shim of DebugLog.Warn(String format, Object[] args)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimDefaultCloseStrategy`1">
            <summary>Shim type of Caliburn.Micro.DefaultCloseStrategy`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDefaultCloseStrategy`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDefaultCloseStrategy`1.#ctor(Caliburn.Micro.DefaultCloseStrategy{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDefaultCloseStrategy`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDefaultCloseStrategy`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDefaultCloseStrategy`1.Bind(Caliburn.Micro.ICloseStrategy{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultCloseStrategy`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultCloseStrategy`1.ConstructorBoolean">
            <summary>Sets the shim of DefaultCloseStrategy`1.DefaultCloseStrategy`1(Boolean closeConductedItemsWhenConductorCannotClose)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultCloseStrategy`1.ExecuteIEnumerableOfT0ActionOfBooleanIEnumerableOfT0">
            <summary>Sets the shim of DefaultCloseStrategy`1.Execute(IEnumerable`1&lt;!0&gt; toClose, Action`2&lt;Boolean,IEnumerable`1&lt;!0&gt;&gt; callback)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimDefaultCloseStrategy`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultCloseStrategy`1.AllInstances.ExecuteIEnumerableOfT0ActionOfBooleanIEnumerableOfT0">
            <summary>Sets the shim of DefaultCloseStrategy`1.Execute(IEnumerable`1&lt;!0&gt; toClose, Action`2&lt;Boolean,IEnumerable`1&lt;!0&gt;&gt; callback)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider">
            <summary>Shim type of Caliburn.Micro.DefaultPlatformProvider</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.#ctor(Caliburn.Micro.DefaultPlatformProvider)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.Bind(Caliburn.Micro.IPlatformProvider)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.BeginOnUIThreadAction">
            <summary>Sets the shim of DefaultPlatformProvider.BeginOnUIThread(Action action)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.Constructor">
            <summary>Sets the shim of DefaultPlatformProvider.DefaultPlatformProvider()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.ExecuteOnFirstLoadObjectActionOfObject">
            <summary>Sets the shim of DefaultPlatformProvider.ExecuteOnFirstLoad(Object view, Action`1&lt;Object&gt; handler)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.ExecuteOnLayoutUpdatedObjectActionOfObject">
            <summary>Sets the shim of DefaultPlatformProvider.ExecuteOnLayoutUpdated(Object view, Action`1&lt;Object&gt; handler)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.GetFirstNonGeneratedViewObject">
            <summary>Sets the shim of DefaultPlatformProvider.GetFirstNonGeneratedView(Object view)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.GetViewCloseActionObjectICollectionOfObjectNullableOfBoolean">
            <summary>Sets the shim of DefaultPlatformProvider.GetViewCloseAction(Object viewModel, ICollection`1&lt;Object&gt; views, Nullable`1&lt;Boolean&gt; dialogResult)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.InDesignModeGet">
            <summary>Sets the shim of DefaultPlatformProvider.get_InDesignMode()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.OnUIThreadAction">
            <summary>Sets the shim of DefaultPlatformProvider.OnUIThread(Action action)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.OnUIThreadAsyncAction">
            <summary>Sets the shim of DefaultPlatformProvider.OnUIThreadAsync(Action action)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider._GetViewCloseActionb__0">
            <summary>Sets the shim of DefaultPlatformProvider.&lt;GetViewCloseAction&gt;b__0()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.AllInstances.BeginOnUIThreadAction">
            <summary>Sets the shim of DefaultPlatformProvider.BeginOnUIThread(Action action)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.AllInstances.ExecuteOnFirstLoadObjectActionOfObject">
            <summary>Sets the shim of DefaultPlatformProvider.ExecuteOnFirstLoad(Object view, Action`1&lt;Object&gt; handler)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.AllInstances.ExecuteOnLayoutUpdatedObjectActionOfObject">
            <summary>Sets the shim of DefaultPlatformProvider.ExecuteOnLayoutUpdated(Object view, Action`1&lt;Object&gt; handler)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.AllInstances.GetFirstNonGeneratedViewObject">
            <summary>Sets the shim of DefaultPlatformProvider.GetFirstNonGeneratedView(Object view)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.AllInstances.GetViewCloseActionObjectICollectionOfObjectNullableOfBoolean">
            <summary>Sets the shim of DefaultPlatformProvider.GetViewCloseAction(Object viewModel, ICollection`1&lt;Object&gt; views, Nullable`1&lt;Boolean&gt; dialogResult)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.AllInstances.InDesignModeGet">
            <summary>Sets the shim of DefaultPlatformProvider.get_InDesignMode()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.AllInstances.OnUIThreadAction">
            <summary>Sets the shim of DefaultPlatformProvider.OnUIThread(Action action)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDefaultPlatformProvider.AllInstances.OnUIThreadAsyncAction">
            <summary>Sets the shim of DefaultPlatformProvider.OnUIThreadAsync(Action action)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimDelegateResult">
            <summary>Shim type of Caliburn.Micro.DelegateResult</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDelegateResult.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDelegateResult.#ctor(Caliburn.Micro.DelegateResult)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDelegateResult.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDelegateResult.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDelegateResult.Bind(Caliburn.Micro.IResult)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult.CompletedAddEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of DelegateResult.add_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult.CompletedRemoveEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of DelegateResult.remove_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult.ConstructorAction">
            <summary>Sets the shim of DelegateResult.DelegateResult(Action action)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult.ExecuteCoroutineExecutionContext">
            <summary>Sets the shim of DelegateResult.Execute(CoroutineExecutionContext context)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult._ctorb__0ObjectResultCompletionEventArgs">
            <summary>Sets the shim of DelegateResult.&lt;.ctor&gt;b__0(Object param0, ResultCompletionEventArgs param1)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimDelegateResult.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult.AllInstances.CompletedAddEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of DelegateResult.add_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult.AllInstances.CompletedRemoveEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of DelegateResult.remove_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult.AllInstances.ExecuteCoroutineExecutionContext">
            <summary>Sets the shim of DelegateResult.Execute(CoroutineExecutionContext context)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimDelegateResult`1">
            <summary>Shim type of Caliburn.Micro.DelegateResult`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDelegateResult`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDelegateResult`1.#ctor(Caliburn.Micro.DelegateResult{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDelegateResult`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDelegateResult`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDelegateResult`1.Bind(Caliburn.Micro.IResult)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimDelegateResult`1.Bind(Caliburn.Micro.IResult{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult`1.CompletedAddEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of DelegateResult`1.add_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult`1.CompletedRemoveEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of DelegateResult`1.remove_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult`1.ConstructorFuncOfT0">
            <summary>Sets the shim of DelegateResult`1.DelegateResult`1(Func`1&lt;!0&gt; action)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult`1.ExecuteCoroutineExecutionContext">
            <summary>Sets the shim of DelegateResult`1.Execute(CoroutineExecutionContext context)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult`1.ResultGet">
            <summary>Sets the shim of DelegateResult`1.get_Result()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult`1.ResultSetT0">
            <summary>Sets the shim of DelegateResult`1.set_Result(!0 value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult`1._ctorb__0ObjectResultCompletionEventArgs">
            <summary>Sets the shim of DelegateResult`1.&lt;.ctor&gt;b__0(Object param0, ResultCompletionEventArgs param1)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimDelegateResult`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult`1.AllInstances.CompletedAddEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of DelegateResult`1.add_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult`1.AllInstances.CompletedRemoveEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of DelegateResult`1.remove_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult`1.AllInstances.ExecuteCoroutineExecutionContext">
            <summary>Sets the shim of DelegateResult`1.Execute(CoroutineExecutionContext context)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult`1.AllInstances.ResultGet">
            <summary>Sets the shim of DelegateResult`1.get_Result()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimDelegateResult`1.AllInstances.ResultSetT0">
            <summary>Sets the shim of DelegateResult`1.set_Result(!0 value)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimEnumerableExtensions">
            <summary>Shim type of Caliburn.Micro.EnumerableExtensions</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimEnumerableExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimEnumerableExtensions.ApplyOf1IEnumerableOfM0ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Collections.Generic.IEnumerable{``0},System.Action{``0}})">
            <summary>Sets the shim of EnumerableExtensions.Apply(IEnumerable`1&lt;!!0&gt; enumerable, Action`1&lt;!!0&gt; action)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimEnumerableExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimEnumerableExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimEnumerableExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimEventAggregator">
            <summary>Shim type of Caliburn.Micro.EventAggregator</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimEventAggregator.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimEventAggregator.#ctor(Caliburn.Micro.EventAggregator)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimEventAggregator.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimEventAggregator.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimEventAggregator.Bind(Caliburn.Micro.IEventAggregator)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimEventAggregator.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimEventAggregator.Constructor">
            <summary>Sets the shim of EventAggregator.EventAggregator()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimEventAggregator.HandlerExistsForType">
            <summary>Sets the shim of EventAggregator.HandlerExistsFor(Type messageType)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimEventAggregator.PublishObjectActionOfAction">
            <summary>Sets the shim of EventAggregator.Publish(Object message, Action`1&lt;Action&gt; marshal)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimEventAggregator.StaticConstructor">
            <summary>Sets the shim of EventAggregator.EventAggregator()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimEventAggregator.SubscribeObject">
            <summary>Sets the shim of EventAggregator.Subscribe(Object subscriber)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimEventAggregator.UnsubscribeObject">
            <summary>Sets the shim of EventAggregator.Unsubscribe(Object subscriber)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimEventAggregator._cctorb__17ObjectObject">
            <summary>Sets the shim of EventAggregator.&lt;.cctor&gt;b__17(Object target, Object result)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimEventAggregator.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimEventAggregator.AllInstances.HandlerExistsForType">
            <summary>Sets the shim of EventAggregator.HandlerExistsFor(Type messageType)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimEventAggregator.AllInstances.PublishObjectActionOfAction">
            <summary>Sets the shim of EventAggregator.Publish(Object message, Action`1&lt;Action&gt; marshal)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimEventAggregator.AllInstances.SubscribeObject">
            <summary>Sets the shim of EventAggregator.Subscribe(Object subscriber)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimEventAggregator.AllInstances.UnsubscribeObject">
            <summary>Sets the shim of EventAggregator.Unsubscribe(Object subscriber)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimEventAggregatorExtensions">
            <summary>Shim type of Caliburn.Micro.EventAggregatorExtensions</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimEventAggregatorExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimEventAggregatorExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimEventAggregatorExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimEventAggregatorExtensions.BeginPublishOnUIThreadIEventAggregatorObject">
            <summary>Sets the shim of EventAggregatorExtensions.BeginPublishOnUIThread(IEventAggregator eventAggregator, Object message)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimEventAggregatorExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimEventAggregatorExtensions.PublishOnBackgroundThreadIEventAggregatorObject">
            <summary>Sets the shim of EventAggregatorExtensions.PublishOnBackgroundThread(IEventAggregator eventAggregator, Object message)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimEventAggregatorExtensions.PublishOnCurrentThreadIEventAggregatorObject">
            <summary>Sets the shim of EventAggregatorExtensions.PublishOnCurrentThread(IEventAggregator eventAggregator, Object message)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimEventAggregatorExtensions.PublishOnUIThreadAsyncIEventAggregatorObject">
            <summary>Sets the shim of EventAggregatorExtensions.PublishOnUIThreadAsync(IEventAggregator eventAggregator, Object message)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimEventAggregatorExtensions.PublishOnUIThreadIEventAggregatorObject">
            <summary>Sets the shim of EventAggregatorExtensions.PublishOnUIThread(IEventAggregator eventAggregator, Object message)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimEventAggregatorExtensions._PublishOnBackgroundThreadb__2Action">
            <summary>Sets the shim of EventAggregatorExtensions.&lt;PublishOnBackgroundThread&gt;b__2(Action action)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimEventAggregatorExtensions._PublishOnCurrentThreadb__0Action">
            <summary>Sets the shim of EventAggregatorExtensions.&lt;PublishOnCurrentThread&gt;b__0(Action action)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimExecute">
            <summary>Shim type of Caliburn.Micro.Execute</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimExecute.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimExecute.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimExecute.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimExecute.BeginOnUIThreadAction">
            <summary>Sets the shim of Execute.BeginOnUIThread(Action action)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimExecute.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimExecute.InDesignModeGet">
            <summary>Sets the shim of Execute.get_InDesignMode()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimExecute.OnUIThreadAction">
            <summary>Sets the shim of Execute.OnUIThread(Action action)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimExecute.OnUIThreadAsyncAction">
            <summary>Sets the shim of Execute.OnUIThreadAsync(Action action)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimExpressionExtensions">
            <summary>Shim type of Caliburn.Micro.ExpressionExtensions</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimExpressionExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimExpressionExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimExpressionExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimExpressionExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimExpressionExtensions.GetMemberInfoExpression">
            <summary>Sets the shim of ExpressionExtensions.GetMemberInfo(Expression expression)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimIoC">
            <summary>Shim type of Caliburn.Micro.IoC</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimIoC.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimIoC.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimIoC.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimIoC.GetAllOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0}})">
            <summary>Sets the shim of IoC.GetAll()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimIoC.GetOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>Sets the shim of IoC.Get(String key)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimIoC.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimIoC.StaticConstructor">
            <summary>Sets the shim of IoC.IoC()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimIoC._cctorb__0TypeString">
            <summary>Sets the shim of IoC.&lt;.cctor&gt;b__0(Type service, String key)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimIoC._cctorb__1Type">
            <summary>Sets the shim of IoC.&lt;.cctor&gt;b__1(Type service)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimIoC._cctorb__2Object">
            <summary>Sets the shim of IoC.&lt;.cctor&gt;b__2(Object instance)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimLogManager">
            <summary>Shim type of Caliburn.Micro.LogManager</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimLogManager.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimLogManager.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimLogManager.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimLogManager.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimLogManager.StaticConstructor">
            <summary>Sets the shim of LogManager.LogManager()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimLogManager._cctorb__0Type">
            <summary>Sets the shim of LogManager.&lt;.cctor&gt;b__0(Type type)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimOverrideCancelResultDecorator">
            <summary>Shim type of Caliburn.Micro.OverrideCancelResultDecorator</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimOverrideCancelResultDecorator.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimOverrideCancelResultDecorator.#ctor(Caliburn.Micro.OverrideCancelResultDecorator)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimOverrideCancelResultDecorator.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimOverrideCancelResultDecorator.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimOverrideCancelResultDecorator.Bind(Caliburn.Micro.IResult)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimOverrideCancelResultDecorator.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimOverrideCancelResultDecorator.ConstructorIResult">
            <summary>Sets the shim of OverrideCancelResultDecorator.OverrideCancelResultDecorator(IResult result)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimOverrideCancelResultDecorator.OnInnerResultCompletedCoroutineExecutionContextIResultResultCompletionEventArgs">
            <summary>Sets the shim of OverrideCancelResultDecorator.OnInnerResultCompleted(CoroutineExecutionContext context, IResult innerResult, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimOverrideCancelResultDecorator.StaticConstructor">
            <summary>Sets the shim of OverrideCancelResultDecorator.OverrideCancelResultDecorator()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimOverrideCancelResultDecorator.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimOverrideCancelResultDecorator.AllInstances.OnInnerResultCompletedCoroutineExecutionContextIResultResultCompletionEventArgs">
            <summary>Sets the shim of OverrideCancelResultDecorator.OnInnerResultCompleted(CoroutineExecutionContext context, IResult innerResult, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimPlatformProvider">
            <summary>Shim type of Caliburn.Micro.PlatformProvider</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimPlatformProvider.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimPlatformProvider.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimPlatformProvider.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimPlatformProvider.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimPlatformProvider.CurrentGet">
            <summary>Sets the shim of PlatformProvider.get_Current()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimPlatformProvider.CurrentSetIPlatformProvider">
            <summary>Sets the shim of PlatformProvider.set_Current(IPlatformProvider value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimPlatformProvider.StaticConstructor">
            <summary>Sets the shim of PlatformProvider.PlatformProvider()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimPropertyChangedBase">
            <summary>Shim type of Caliburn.Micro.PropertyChangedBase</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimPropertyChangedBase.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimPropertyChangedBase.#ctor(Caliburn.Micro.PropertyChangedBase)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimPropertyChangedBase.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimPropertyChangedBase.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimPropertyChangedBase.Bind(Caliburn.Micro.INotifyPropertyChangedEx)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimPropertyChangedBase.Bind(System.ComponentModel.INotifyPropertyChanged)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimPropertyChangedBase.NotifyOfPropertyChangeOf1ExpressionOfFuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Linq.Expressions.Expression{System.Func{``0}}})">
            <summary>Sets the shim of PropertyChangedBase.NotifyOfPropertyChange(Expression`1&lt;Func`1&lt;!!0&gt;&gt; property)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimPropertyChangedBase.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimPropertyChangedBase.Constructor">
            <summary>Sets the shim of PropertyChangedBase.PropertyChangedBase()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimPropertyChangedBase.IsNotifyingGet">
            <summary>Sets the shim of PropertyChangedBase.get_IsNotifying()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimPropertyChangedBase.IsNotifyingSetBoolean">
            <summary>Sets the shim of PropertyChangedBase.set_IsNotifying(Boolean value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimPropertyChangedBase.NotifyOfPropertyChangeString">
            <summary>Sets the shim of PropertyChangedBase.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimPropertyChangedBase.OnPropertyChangedPropertyChangedEventArgs">
            <summary>Sets the shim of PropertyChangedBase.OnPropertyChanged(PropertyChangedEventArgs e)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimPropertyChangedBase.PropertyChangedAddPropertyChangedEventHandler">
            <summary>Sets the shim of PropertyChangedBase.add_PropertyChanged(PropertyChangedEventHandler value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimPropertyChangedBase.PropertyChangedRemovePropertyChangedEventHandler">
            <summary>Sets the shim of PropertyChangedBase.remove_PropertyChanged(PropertyChangedEventHandler value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimPropertyChangedBase.Refresh">
            <summary>Sets the shim of PropertyChangedBase.Refresh()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimPropertyChangedBase._ctorb__0ObjectPropertyChangedEventArgs">
            <summary>Sets the shim of PropertyChangedBase.&lt;.ctor&gt;b__0(Object param0, PropertyChangedEventArgs param1)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimPropertyChangedBase.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimPropertyChangedBase.AllInstances.NotifyOfPropertyChangeOf1ExpressionOfFuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Caliburn.Micro.PropertyChangedBase,System.Linq.Expressions.Expression{System.Func{``0}}})">
            <summary>Sets the shim of PropertyChangedBase.NotifyOfPropertyChange(Expression`1&lt;Func`1&lt;!!0&gt;&gt; property)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimPropertyChangedBase.AllInstances.IsNotifyingGet">
            <summary>Sets the shim of PropertyChangedBase.get_IsNotifying()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimPropertyChangedBase.AllInstances.IsNotifyingSetBoolean">
            <summary>Sets the shim of PropertyChangedBase.set_IsNotifying(Boolean value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimPropertyChangedBase.AllInstances.NotifyOfPropertyChangeString">
            <summary>Sets the shim of PropertyChangedBase.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimPropertyChangedBase.AllInstances.OnPropertyChangedPropertyChangedEventArgs">
            <summary>Sets the shim of PropertyChangedBase.OnPropertyChanged(PropertyChangedEventArgs e)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimPropertyChangedBase.AllInstances.PropertyChangedAddPropertyChangedEventHandler">
            <summary>Sets the shim of PropertyChangedBase.add_PropertyChanged(PropertyChangedEventHandler value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimPropertyChangedBase.AllInstances.PropertyChangedRemovePropertyChangedEventHandler">
            <summary>Sets the shim of PropertyChangedBase.remove_PropertyChanged(PropertyChangedEventHandler value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimPropertyChangedBase.AllInstances.Refresh">
            <summary>Sets the shim of PropertyChangedBase.Refresh()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimRescueResultDecorator`1">
            <summary>Shim type of Caliburn.Micro.RescueResultDecorator`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimRescueResultDecorator`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimRescueResultDecorator`1.#ctor(Caliburn.Micro.RescueResultDecorator{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimRescueResultDecorator`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimRescueResultDecorator`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimRescueResultDecorator`1.Bind(Caliburn.Micro.IResult)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimRescueResultDecorator`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimRescueResultDecorator`1.ConstructorIResultFuncOfT0IResultBoolean">
            <summary>Sets the shim of RescueResultDecorator`1.RescueResultDecorator`1(IResult result, Func`2&lt;!0,IResult&gt; coroutine, Boolean cancelResult)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimRescueResultDecorator`1.OnInnerResultCompletedCoroutineExecutionContextIResultResultCompletionEventArgs">
            <summary>Sets the shim of RescueResultDecorator`1.OnInnerResultCompleted(CoroutineExecutionContext context, IResult innerResult, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimRescueResultDecorator`1.RescueCompletedObjectResultCompletionEventArgs">
            <summary>Sets the shim of RescueResultDecorator`1.RescueCompleted(Object sender, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimRescueResultDecorator`1.RescueCoroutineExecutionContextT0">
            <summary>Sets the shim of RescueResultDecorator`1.Rescue(CoroutineExecutionContext context, !0 exception)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimRescueResultDecorator`1.StaticConstructor">
            <summary>Sets the shim of RescueResultDecorator`1.RescueResultDecorator`1()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimRescueResultDecorator`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimRescueResultDecorator`1.AllInstances.OnInnerResultCompletedCoroutineExecutionContextIResultResultCompletionEventArgs">
            <summary>Sets the shim of RescueResultDecorator`1.OnInnerResultCompleted(CoroutineExecutionContext context, IResult innerResult, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimRescueResultDecorator`1.AllInstances.RescueCompletedObjectResultCompletionEventArgs">
            <summary>Sets the shim of RescueResultDecorator`1.RescueCompleted(Object sender, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimRescueResultDecorator`1.AllInstances.RescueCoroutineExecutionContextT0">
            <summary>Sets the shim of RescueResultDecorator`1.Rescue(CoroutineExecutionContext context, !0 exception)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimResultCompletionEventArgs">
            <summary>Shim type of Caliburn.Micro.ResultCompletionEventArgs</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimResultCompletionEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimResultCompletionEventArgs.#ctor(Caliburn.Micro.ResultCompletionEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimResultCompletionEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimResultCompletionEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimResultCompletionEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimResultCompletionEventArgs.Constructor">
            <summary>Sets the shim of ResultCompletionEventArgs.ResultCompletionEventArgs()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimResultCompletionEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimResultDecoratorBase">
            <summary>Shim type of Caliburn.Micro.ResultDecoratorBase</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimResultDecoratorBase.#ctor(Caliburn.Micro.ResultDecoratorBase)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimResultDecoratorBase.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimResultDecoratorBase.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimResultDecoratorBase.Bind(Caliburn.Micro.IResult)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimResultDecoratorBase.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimResultDecoratorBase.CompletedAddEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of ResultDecoratorBase.add_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimResultDecoratorBase.CompletedRemoveEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of ResultDecoratorBase.remove_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimResultDecoratorBase.ConstructorIResult">
            <summary>Sets the shim of ResultDecoratorBase.ResultDecoratorBase(IResult result)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimResultDecoratorBase.ExecuteCoroutineExecutionContext">
            <summary>Sets the shim of ResultDecoratorBase.Execute(CoroutineExecutionContext context)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimResultDecoratorBase.InnerResultCompletedObjectResultCompletionEventArgs">
            <summary>Sets the shim of ResultDecoratorBase.InnerResultCompleted(Object sender, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimResultDecoratorBase.OnCompletedResultCompletionEventArgs">
            <summary>Sets the shim of ResultDecoratorBase.OnCompleted(ResultCompletionEventArgs args)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimResultDecoratorBase._ctorb__0ObjectResultCompletionEventArgs">
            <summary>Sets the shim of ResultDecoratorBase.&lt;.ctor&gt;b__0(Object param0, ResultCompletionEventArgs param1)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimResultDecoratorBase.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimResultDecoratorBase.AllInstances.CompletedAddEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of ResultDecoratorBase.add_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimResultDecoratorBase.AllInstances.CompletedRemoveEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of ResultDecoratorBase.remove_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimResultDecoratorBase.AllInstances.ExecuteCoroutineExecutionContext">
            <summary>Sets the shim of ResultDecoratorBase.Execute(CoroutineExecutionContext context)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimResultDecoratorBase.AllInstances.InnerResultCompletedObjectResultCompletionEventArgs">
            <summary>Sets the shim of ResultDecoratorBase.InnerResultCompleted(Object sender, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimResultDecoratorBase.AllInstances.OnCompletedResultCompletionEventArgs">
            <summary>Sets the shim of ResultDecoratorBase.OnCompleted(ResultCompletionEventArgs args)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimResultExtensions">
            <summary>Shim type of Caliburn.Micro.ResultExtensions</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimResultExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimResultExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimResultExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimResultExtensions.RescueOf1IResultFuncOfM0IResultBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Caliburn.Micro.IResult,System.Func{``0,Caliburn.Micro.IResult},System.Boolean,Caliburn.Micro.IResult})">
            <summary>Sets the shim of ResultExtensions.Rescue(IResult result, Func`2&lt;!!0,IResult&gt; rescue, Boolean cancelResult)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimResultExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimResultExtensions.OverrideCancelIResult">
            <summary>Sets the shim of ResultExtensions.OverrideCancel(IResult result)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimResultExtensions.RescueIResultFuncOfExceptionIResultBoolean">
            <summary>Sets the shim of ResultExtensions.Rescue(IResult result, Func`2&lt;Exception,IResult&gt; rescue, Boolean cancelResult)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimResultExtensions.WhenCancelledIResultFuncOfIResult">
            <summary>Sets the shim of ResultExtensions.WhenCancelled(IResult result, Func`1&lt;IResult&gt; coroutine)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimScreen">
            <summary>Shim type of Caliburn.Micro.Screen</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimScreen.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimScreen.#ctor(Caliburn.Micro.Screen)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimScreen.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimScreen.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimScreen.Bind(Caliburn.Micro.IActivate)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimScreen.Bind(Caliburn.Micro.IChild)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimScreen.Bind(Caliburn.Micro.IClose)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimScreen.Bind(Caliburn.Micro.IDeactivate)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimScreen.Bind(Caliburn.Micro.IGuardClose)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimScreen.Bind(Caliburn.Micro.IHaveDisplayName)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimScreen.Bind(Caliburn.Micro.INotifyPropertyChangedEx)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimScreen.Bind(Caliburn.Micro.IScreen)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimScreen.Bind(Caliburn.Micro.IViewAware)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimScreen.Bind(System.ComponentModel.INotifyPropertyChanged)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.ActivatedAddEventHandlerOfActivationEventArgs">
            <summary>Sets the shim of Screen.add_Activated(EventHandler`1&lt;ActivationEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.ActivatedRemoveEventHandlerOfActivationEventArgs">
            <summary>Sets the shim of Screen.remove_Activated(EventHandler`1&lt;ActivationEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AttemptingDeactivationAddEventHandlerOfDeactivationEventArgs">
            <summary>Sets the shim of Screen.add_AttemptingDeactivation(EventHandler`1&lt;DeactivationEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AttemptingDeactivationRemoveEventHandlerOfDeactivationEventArgs">
            <summary>Sets the shim of Screen.remove_AttemptingDeactivation(EventHandler`1&lt;DeactivationEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.CaliburnMicroIActivateActivate">
            <summary>Sets the shim of Screen.Caliburn.Micro.IActivate.Activate()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.CaliburnMicroIDeactivateDeactivateBoolean">
            <summary>Sets the shim of Screen.Caliburn.Micro.IDeactivate.Deactivate(Boolean close)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.CanCloseActionOfBoolean">
            <summary>Sets the shim of Screen.CanClose(Action`1&lt;Boolean&gt; callback)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.Constructor">
            <summary>Sets the shim of Screen.Screen()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.DeactivatedAddEventHandlerOfDeactivationEventArgs">
            <summary>Sets the shim of Screen.add_Deactivated(EventHandler`1&lt;DeactivationEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.DeactivatedRemoveEventHandlerOfDeactivationEventArgs">
            <summary>Sets the shim of Screen.remove_Deactivated(EventHandler`1&lt;DeactivationEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.DisplayNameGet">
            <summary>Sets the shim of Screen.get_DisplayName()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.DisplayNameSetString">
            <summary>Sets the shim of Screen.set_DisplayName(String value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.IsActiveGet">
            <summary>Sets the shim of Screen.get_IsActive()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.IsActiveSetBoolean">
            <summary>Sets the shim of Screen.set_IsActive(Boolean value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.IsInitializedGet">
            <summary>Sets the shim of Screen.get_IsInitialized()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.IsInitializedSetBoolean">
            <summary>Sets the shim of Screen.set_IsInitialized(Boolean value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.OnActivate">
            <summary>Sets the shim of Screen.OnActivate()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.OnDeactivateBoolean">
            <summary>Sets the shim of Screen.OnDeactivate(Boolean close)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.OnInitialize">
            <summary>Sets the shim of Screen.OnInitialize()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.ParentGet">
            <summary>Sets the shim of Screen.get_Parent()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.ParentSetObject">
            <summary>Sets the shim of Screen.set_Parent(Object value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.StaticConstructor">
            <summary>Sets the shim of Screen.Screen()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.TryCloseNullableOfBoolean">
            <summary>Sets the shim of Screen.TryClose(Nullable`1&lt;Boolean&gt; dialogResult)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen._ctorb__cObjectActivationEventArgs">
            <summary>Sets the shim of Screen.&lt;.ctor&gt;b__c(Object param0, ActivationEventArgs param1)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen._ctorb__dObjectDeactivationEventArgs">
            <summary>Sets the shim of Screen.&lt;.ctor&gt;b__d(Object param0, DeactivationEventArgs param1)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen._ctorb__eObjectDeactivationEventArgs">
            <summary>Sets the shim of Screen.&lt;.ctor&gt;b__e(Object param0, DeactivationEventArgs param1)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimScreen.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AllInstances.ActivatedAddEventHandlerOfActivationEventArgs">
            <summary>Sets the shim of Screen.add_Activated(EventHandler`1&lt;ActivationEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AllInstances.ActivatedRemoveEventHandlerOfActivationEventArgs">
            <summary>Sets the shim of Screen.remove_Activated(EventHandler`1&lt;ActivationEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AllInstances.AttemptingDeactivationAddEventHandlerOfDeactivationEventArgs">
            <summary>Sets the shim of Screen.add_AttemptingDeactivation(EventHandler`1&lt;DeactivationEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AllInstances.AttemptingDeactivationRemoveEventHandlerOfDeactivationEventArgs">
            <summary>Sets the shim of Screen.remove_AttemptingDeactivation(EventHandler`1&lt;DeactivationEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AllInstances.CaliburnMicroIActivateActivate">
            <summary>Sets the shim of Screen.Caliburn.Micro.IActivate.Activate()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AllInstances.CaliburnMicroIDeactivateDeactivateBoolean">
            <summary>Sets the shim of Screen.Caliburn.Micro.IDeactivate.Deactivate(Boolean close)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AllInstances.CanCloseActionOfBoolean">
            <summary>Sets the shim of Screen.CanClose(Action`1&lt;Boolean&gt; callback)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AllInstances.DeactivatedAddEventHandlerOfDeactivationEventArgs">
            <summary>Sets the shim of Screen.add_Deactivated(EventHandler`1&lt;DeactivationEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AllInstances.DeactivatedRemoveEventHandlerOfDeactivationEventArgs">
            <summary>Sets the shim of Screen.remove_Deactivated(EventHandler`1&lt;DeactivationEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AllInstances.DisplayNameGet">
            <summary>Sets the shim of Screen.get_DisplayName()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AllInstances.DisplayNameSetString">
            <summary>Sets the shim of Screen.set_DisplayName(String value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AllInstances.IsActiveGet">
            <summary>Sets the shim of Screen.get_IsActive()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AllInstances.IsActiveSetBoolean">
            <summary>Sets the shim of Screen.set_IsActive(Boolean value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AllInstances.IsInitializedGet">
            <summary>Sets the shim of Screen.get_IsInitialized()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AllInstances.IsInitializedSetBoolean">
            <summary>Sets the shim of Screen.set_IsInitialized(Boolean value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AllInstances.OnActivate">
            <summary>Sets the shim of Screen.OnActivate()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AllInstances.OnDeactivateBoolean">
            <summary>Sets the shim of Screen.OnDeactivate(Boolean close)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AllInstances.OnInitialize">
            <summary>Sets the shim of Screen.OnInitialize()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AllInstances.ParentGet">
            <summary>Sets the shim of Screen.get_Parent()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AllInstances.ParentSetObject">
            <summary>Sets the shim of Screen.set_Parent(Object value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreen.AllInstances.TryCloseNullableOfBoolean">
            <summary>Sets the shim of Screen.TryClose(Nullable`1&lt;Boolean&gt; dialogResult)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimScreenExtensions">
            <summary>Shim type of Caliburn.Micro.ScreenExtensions</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimScreenExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimScreenExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimScreenExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimScreenExtensions.CloseItemOf1ConductorBaseOfM0M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Caliburn.Micro.ConductorBase{``0},``0})">
            <summary>Sets the shim of ScreenExtensions.CloseItem(ConductorBase`1&lt;!!0&gt; conductor, !!0 item)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimScreenExtensions.ConductWithOf2M0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0,``1})">
            <summary>Sets the shim of ScreenExtensions.ConductWith(!!0 child, !!1 parent)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreenExtensions.ActivateWithIActivateIActivate">
            <summary>Sets the shim of ScreenExtensions.ActivateWith(IActivate child, IActivate parent)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreenExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreenExtensions.CloseItemIConductorObject">
            <summary>Sets the shim of ScreenExtensions.CloseItem(IConductor conductor, Object item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreenExtensions.DeactivateWithIDeactivateIDeactivate">
            <summary>Sets the shim of ScreenExtensions.DeactivateWith(IDeactivate child, IDeactivate parent)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreenExtensions.TryActivateObject">
            <summary>Sets the shim of ScreenExtensions.TryActivate(Object potentialActivatable)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimScreenExtensions.TryDeactivateObjectBoolean">
            <summary>Sets the shim of ScreenExtensions.TryDeactivate(Object potentialDeactivatable, Boolean close)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimSequentialResult">
            <summary>Shim type of Caliburn.Micro.SequentialResult</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimSequentialResult.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimSequentialResult.#ctor(Caliburn.Micro.SequentialResult)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimSequentialResult.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimSequentialResult.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimSequentialResult.Bind(Caliburn.Micro.IResult)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSequentialResult.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSequentialResult.ChildCompletedObjectResultCompletionEventArgs">
            <summary>Sets the shim of SequentialResult.ChildCompleted(Object sender, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSequentialResult.CompletedAddEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of SequentialResult.add_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSequentialResult.CompletedRemoveEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of SequentialResult.remove_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSequentialResult.ConstructorIEnumeratorOfIResult">
            <summary>Sets the shim of SequentialResult.SequentialResult(IEnumerator`1&lt;IResult&gt; enumerator)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSequentialResult.ExecuteCoroutineExecutionContext">
            <summary>Sets the shim of SequentialResult.Execute(CoroutineExecutionContext context)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSequentialResult.OnCompleteExceptionBoolean">
            <summary>Sets the shim of SequentialResult.OnComplete(Exception error, Boolean wasCancelled)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSequentialResult._ctorb__0ObjectResultCompletionEventArgs">
            <summary>Sets the shim of SequentialResult.&lt;.ctor&gt;b__0(Object param0, ResultCompletionEventArgs param1)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimSequentialResult.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSequentialResult.AllInstances.ChildCompletedObjectResultCompletionEventArgs">
            <summary>Sets the shim of SequentialResult.ChildCompleted(Object sender, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSequentialResult.AllInstances.CompletedAddEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of SequentialResult.add_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSequentialResult.AllInstances.CompletedRemoveEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of SequentialResult.remove_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSequentialResult.AllInstances.ExecuteCoroutineExecutionContext">
            <summary>Sets the shim of SequentialResult.Execute(CoroutineExecutionContext context)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSequentialResult.AllInstances.OnCompleteExceptionBoolean">
            <summary>Sets the shim of SequentialResult.OnComplete(Exception error, Boolean wasCancelled)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimSimpleContainer">
            <summary>Shim type of Caliburn.Micro.SimpleContainer</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimSimpleContainer.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimSimpleContainer.#ctor(Caliburn.Micro.SimpleContainer)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimSimpleContainer.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimSimpleContainer.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.ActivateInstanceTypeObjectArray">
            <summary>Sets the shim of SimpleContainer.ActivateInstance(Type type, Object[] args)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.ActivatedAddActionOfObject">
            <summary>Sets the shim of SimpleContainer.add_Activated(Action`1&lt;Object&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.ActivatedRemoveActionOfObject">
            <summary>Sets the shim of SimpleContainer.remove_Activated(Action`1&lt;Object&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.BuildInstanceType">
            <summary>Sets the shim of SimpleContainer.BuildInstance(Type type)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.BuildUpObject">
            <summary>Sets the shim of SimpleContainer.BuildUp(Object instance)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.Constructor">
            <summary>Sets the shim of SimpleContainer.SimpleContainer()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.CreateChildContainer">
            <summary>Sets the shim of SimpleContainer.CreateChildContainer()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.DetermineConstructorArgsType">
            <summary>Sets the shim of SimpleContainer.DetermineConstructorArgs(Type implementation)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.GetAllInstancesType">
            <summary>Sets the shim of SimpleContainer.GetAllInstances(Type service)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.GetInstanceTypeString">
            <summary>Sets the shim of SimpleContainer.GetInstance(Type service, String key)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.HasHandlerTypeString">
            <summary>Sets the shim of SimpleContainer.HasHandler(Type service, String key)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.RegisterHandlerTypeStringFuncOfSimpleContainerObject">
            <summary>Sets the shim of SimpleContainer.RegisterHandler(Type service, String key, Func`2&lt;SimpleContainer,Object&gt; handler)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.RegisterInstanceTypeStringObject">
            <summary>Sets the shim of SimpleContainer.RegisterInstance(Type service, String key, Object implementation)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.RegisterPerRequestTypeStringType">
            <summary>Sets the shim of SimpleContainer.RegisterPerRequest(Type service, String key, Type implementation)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.RegisterSingletonTypeStringType">
            <summary>Sets the shim of SimpleContainer.RegisterSingleton(Type service, String key, Type implementation)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.SelectEligibleConstructorType">
            <summary>Sets the shim of SimpleContainer.SelectEligibleConstructor(Type type)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.StaticConstructor">
            <summary>Sets the shim of SimpleContainer.SimpleContainer()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.UnregisterHandlerTypeString">
            <summary>Sets the shim of SimpleContainer.UnregisterHandler(Type service, String key)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer._BuildUpb__ePropertyInfo">
            <summary>Sets the shim of SimpleContainer.&lt;BuildUp&gt;b__e(PropertyInfo property)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer._DetermineConstructorArgsb__1aParameterInfo">
            <summary>Sets the shim of SimpleContainer.&lt;DetermineConstructorArgs&gt;b__1a(ParameterInfo info)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer._GetAllInstancesb__dFuncOfSimpleContainerObject">
            <summary>Sets the shim of SimpleContainer.&lt;GetAllInstances&gt;b__d(Func`2&lt;SimpleContainer,Object&gt; x)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer._SelectEligibleConstructorb__1bConstructorInfo">
            <summary>Sets the shim of SimpleContainer.&lt;SelectEligibleConstructor&gt;b__1b(ConstructorInfo c)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer._ctorb__0Object">
            <summary>Sets the shim of SimpleContainer.&lt;.ctor&gt;b__0(Object param0)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer._ctorb__2Object">
            <summary>Sets the shim of SimpleContainer.&lt;.ctor&gt;b__2(Object param0)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimSimpleContainer.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.AllInstances.ActivateInstanceTypeObjectArray">
            <summary>Sets the shim of SimpleContainer.ActivateInstance(Type type, Object[] args)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.AllInstances.ActivatedAddActionOfObject">
            <summary>Sets the shim of SimpleContainer.add_Activated(Action`1&lt;Object&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.AllInstances.ActivatedRemoveActionOfObject">
            <summary>Sets the shim of SimpleContainer.remove_Activated(Action`1&lt;Object&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.AllInstances.BuildInstanceType">
            <summary>Sets the shim of SimpleContainer.BuildInstance(Type type)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.AllInstances.BuildUpObject">
            <summary>Sets the shim of SimpleContainer.BuildUp(Object instance)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.AllInstances.CreateChildContainer">
            <summary>Sets the shim of SimpleContainer.CreateChildContainer()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.AllInstances.DetermineConstructorArgsType">
            <summary>Sets the shim of SimpleContainer.DetermineConstructorArgs(Type implementation)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.AllInstances.GetAllInstancesType">
            <summary>Sets the shim of SimpleContainer.GetAllInstances(Type service)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.AllInstances.GetInstanceTypeString">
            <summary>Sets the shim of SimpleContainer.GetInstance(Type service, String key)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.AllInstances.HasHandlerTypeString">
            <summary>Sets the shim of SimpleContainer.HasHandler(Type service, String key)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.AllInstances.RegisterHandlerTypeStringFuncOfSimpleContainerObject">
            <summary>Sets the shim of SimpleContainer.RegisterHandler(Type service, String key, Func`2&lt;SimpleContainer,Object&gt; handler)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.AllInstances.RegisterInstanceTypeStringObject">
            <summary>Sets the shim of SimpleContainer.RegisterInstance(Type service, String key, Object implementation)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.AllInstances.RegisterPerRequestTypeStringType">
            <summary>Sets the shim of SimpleContainer.RegisterPerRequest(Type service, String key, Type implementation)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.AllInstances.RegisterSingletonTypeStringType">
            <summary>Sets the shim of SimpleContainer.RegisterSingleton(Type service, String key, Type implementation)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.AllInstances.UnregisterHandlerTypeString">
            <summary>Sets the shim of SimpleContainer.UnregisterHandler(Type service, String key)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.AllInstances._DetermineConstructorArgsb__1aParameterInfo">
            <summary>Sets the shim of SimpleContainer.&lt;DetermineConstructorArgs&gt;b__1a(ParameterInfo info)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleContainer.AllInstances._GetAllInstancesb__dFuncOfSimpleContainerObject">
            <summary>Sets the shim of SimpleContainer.&lt;GetAllInstances&gt;b__d(Func`2&lt;SimpleContainer,Object&gt; x)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimSimpleResult">
            <summary>Shim type of Caliburn.Micro.SimpleResult</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimSimpleResult.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimSimpleResult.#ctor(Caliburn.Micro.SimpleResult)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimSimpleResult.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimSimpleResult.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimSimpleResult.Bind(Caliburn.Micro.IResult)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleResult.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleResult.Cancelled">
            <summary>Sets the shim of SimpleResult.Cancelled()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleResult.CompletedAddEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of SimpleResult.add_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleResult.CompletedRemoveEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of SimpleResult.remove_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleResult.ConstructorBooleanException">
            <summary>Sets the shim of SimpleResult.SimpleResult(Boolean wasCancelled, Exception error)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleResult.ExecuteCoroutineExecutionContext">
            <summary>Sets the shim of SimpleResult.Execute(CoroutineExecutionContext context)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleResult.FailedException">
            <summary>Sets the shim of SimpleResult.Failed(Exception error)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleResult.Succeeded">
            <summary>Sets the shim of SimpleResult.Succeeded()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleResult._ctorb__0ObjectResultCompletionEventArgs">
            <summary>Sets the shim of SimpleResult.&lt;.ctor&gt;b__0(Object param0, ResultCompletionEventArgs param1)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimSimpleResult.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleResult.AllInstances.CompletedAddEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of SimpleResult.add_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleResult.AllInstances.CompletedRemoveEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of SimpleResult.remove_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimSimpleResult.AllInstances.ExecuteCoroutineExecutionContext">
            <summary>Sets the shim of SimpleResult.Execute(CoroutineExecutionContext context)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimTaskExtensions">
            <summary>Shim type of Caliburn.Micro.TaskExtensions</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimTaskExtensions.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimTaskExtensions.AsResultOf1TaskOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Threading.Tasks.Task{``0},Caliburn.Micro.TaskResult{``0}})">
            <summary>Sets the shim of TaskExtensions.AsResult(Task`1&lt;!!0&gt; task)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimTaskExtensions.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimTaskExtensions.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimTaskExtensions.ExecuteAsyncOf1IResultOfM0CoroutineExecutionContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Caliburn.Micro.IResult{``0},Caliburn.Micro.CoroutineExecutionContext,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the shim of TaskExtensions.ExecuteAsync(IResult`1&lt;!!0&gt; result, CoroutineExecutionContext context)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimTaskExtensions.InternalExecuteAsyncOf1IResultCoroutineExecutionContext``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Caliburn.Micro.IResult,Caliburn.Micro.CoroutineExecutionContext,System.Threading.Tasks.Task{``0}})">
            <summary>Sets the shim of TaskExtensions.InternalExecuteAsync(IResult result, CoroutineExecutionContext context)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskExtensions.AsResultTask">
            <summary>Sets the shim of TaskExtensions.AsResult(Task task)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskExtensions.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskExtensions.ExecuteAsyncIResultCoroutineExecutionContext">
            <summary>Sets the shim of TaskExtensions.ExecuteAsync(IResult result, CoroutineExecutionContext context)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimTaskResult">
            <summary>Shim type of Caliburn.Micro.TaskResult</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimTaskResult.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimTaskResult.#ctor(Caliburn.Micro.TaskResult)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimTaskResult.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimTaskResult.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimTaskResult.Bind(Caliburn.Micro.IResult)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskResult.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskResult.CompletedAddEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of TaskResult.add_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskResult.CompletedRemoveEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of TaskResult.remove_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskResult.ConstructorTask">
            <summary>Sets the shim of TaskResult.TaskResult(Task task)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskResult.ExecuteCoroutineExecutionContext">
            <summary>Sets the shim of TaskResult.Execute(CoroutineExecutionContext context)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskResult.OnCompletedTask">
            <summary>Sets the shim of TaskResult.OnCompleted(Task task)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskResult._ctorb__0ObjectResultCompletionEventArgs">
            <summary>Sets the shim of TaskResult.&lt;.ctor&gt;b__0(Object param0, ResultCompletionEventArgs param1)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimTaskResult.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskResult.AllInstances.CompletedAddEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of TaskResult.add_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskResult.AllInstances.CompletedRemoveEventHandlerOfResultCompletionEventArgs">
            <summary>Sets the shim of TaskResult.remove_Completed(EventHandler`1&lt;ResultCompletionEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskResult.AllInstances.ExecuteCoroutineExecutionContext">
            <summary>Sets the shim of TaskResult.Execute(CoroutineExecutionContext context)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskResult.AllInstances.OnCompletedTask">
            <summary>Sets the shim of TaskResult.OnCompleted(Task task)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimTaskResult`1">
            <summary>Shim type of Caliburn.Micro.TaskResult`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimTaskResult`1.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimTaskResult`1.#ctor(Caliburn.Micro.TaskResult{`0})">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimTaskResult`1.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimTaskResult`1.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimTaskResult`1.Bind(Caliburn.Micro.IResult)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimTaskResult`1.Bind(Caliburn.Micro.IResult{`0})">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskResult`1.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskResult`1.ConstructorTaskOfT0">
            <summary>Sets the shim of TaskResult`1.TaskResult`1(Task`1&lt;!0&gt; task)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskResult`1.OnCompletedTask">
            <summary>Sets the shim of TaskResult`1.OnCompleted(Task task)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskResult`1.ResultGet">
            <summary>Sets the shim of TaskResult`1.get_Result()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskResult`1.ResultSetT0">
            <summary>Sets the shim of TaskResult`1.set_Result(!0 value)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimTaskResult`1.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskResult`1.AllInstances.OnCompletedTask">
            <summary>Sets the shim of TaskResult`1.OnCompleted(Task task)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskResult`1.AllInstances.ResultGet">
            <summary>Sets the shim of TaskResult`1.get_Result()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimTaskResult`1.AllInstances.ResultSetT0">
            <summary>Sets the shim of TaskResult`1.set_Result(!0 value)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimViewAttachedEventArgs">
            <summary>Shim type of Caliburn.Micro.ViewAttachedEventArgs</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimViewAttachedEventArgs.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimViewAttachedEventArgs.#ctor(Caliburn.Micro.ViewAttachedEventArgs)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimViewAttachedEventArgs.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimViewAttachedEventArgs.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAttachedEventArgs.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAttachedEventArgs.Constructor">
            <summary>Sets the shim of ViewAttachedEventArgs.ViewAttachedEventArgs()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimViewAttachedEventArgs.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimViewAware">
            <summary>Shim type of Caliburn.Micro.ViewAware</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimViewAware.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimViewAware.#ctor(Caliburn.Micro.ViewAware)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimViewAware.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimViewAware.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimViewAware.Bind(Caliburn.Micro.INotifyPropertyChangedEx)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimViewAware.Bind(Caliburn.Micro.IViewAware)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.ShimViewAware.Bind(System.ComponentModel.INotifyPropertyChanged)">
            <summary>Binds the members of the interface to the shim.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAware.AttachViewReadyOnActivatedIActivateObject">
            <summary>Sets the shim of ViewAware.AttachViewReadyOnActivated(IActivate activatable, Object nonGeneratedView)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAware.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAware.CaliburnMicroIViewAwareAttachViewObjectObject">
            <summary>Sets the shim of ViewAware.Caliburn.Micro.IViewAware.AttachView(Object view, Object context)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAware.Constructor">
            <summary>Sets the shim of ViewAware.ViewAware()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAware.GetViewObject">
            <summary>Sets the shim of ViewAware.GetView(Object context)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAware.OnViewAttachedObjectObject">
            <summary>Sets the shim of ViewAware.OnViewAttached(Object view, Object context)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAware.OnViewLoadedObject">
            <summary>Sets the shim of ViewAware.OnViewLoaded(Object view)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAware.OnViewReadyObject">
            <summary>Sets the shim of ViewAware.OnViewReady(Object view)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAware.StaticConstructor">
            <summary>Sets the shim of ViewAware.ViewAware()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAware.ViewAttachedAddEventHandlerOfViewAttachedEventArgs">
            <summary>Sets the shim of ViewAware.add_ViewAttached(EventHandler`1&lt;ViewAttachedEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAware.ViewAttachedRemoveEventHandlerOfViewAttachedEventArgs">
            <summary>Sets the shim of ViewAware.remove_ViewAttached(EventHandler`1&lt;ViewAttachedEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAware.ViewsGet">
            <summary>Sets the shim of ViewAware.get_Views()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAware._ctorb__6ObjectViewAttachedEventArgs">
            <summary>Sets the shim of ViewAware.&lt;.ctor&gt;b__6(Object param0, ViewAttachedEventArgs param1)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.ShimViewAware.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAware.AllInstances.CaliburnMicroIViewAwareAttachViewObjectObject">
            <summary>Sets the shim of ViewAware.Caliburn.Micro.IViewAware.AttachView(Object view, Object context)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAware.AllInstances.GetViewObject">
            <summary>Sets the shim of ViewAware.GetView(Object context)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAware.AllInstances.OnViewAttachedObjectObject">
            <summary>Sets the shim of ViewAware.OnViewAttached(Object view, Object context)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAware.AllInstances.OnViewLoadedObject">
            <summary>Sets the shim of ViewAware.OnViewLoaded(Object view)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAware.AllInstances.OnViewReadyObject">
            <summary>Sets the shim of ViewAware.OnViewReady(Object view)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAware.AllInstances.ViewAttachedAddEventHandlerOfViewAttachedEventArgs">
            <summary>Sets the shim of ViewAware.add_ViewAttached(EventHandler`1&lt;ViewAttachedEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAware.AllInstances.ViewAttachedRemoveEventHandlerOfViewAttachedEventArgs">
            <summary>Sets the shim of ViewAware.remove_ViewAttached(EventHandler`1&lt;ViewAttachedEventArgs&gt; value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.ShimViewAware.AllInstances.ViewsGet">
            <summary>Sets the shim of ViewAware.get_Views()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubActivationEventArgs">
            <summary>Stub type of Caliburn.Micro.ActivationEventArgs</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubActivationEventArgs.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubActivationEventArgs.InitializeStub">
            <summary>Initializes a new instance of type StubActivationEventArgs</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubActivationEventArgs.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubActivationEventArgs.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubActivationEventArgs.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubActivationProcessedEventArgs">
            <summary>Stub type of Caliburn.Micro.ActivationProcessedEventArgs</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubActivationProcessedEventArgs.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubActivationProcessedEventArgs.InitializeStub">
            <summary>Initializes a new instance of type StubActivationProcessedEventArgs</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubActivationProcessedEventArgs.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubActivationProcessedEventArgs.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubActivationProcessedEventArgs.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubBindableCollection`1">
            <summary>Stub type of Caliburn.Micro.BindableCollection`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubBindableCollection`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubBindableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubBindableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>Sets the stub of BindableCollection`1.AddRange(IEnumerable`1&lt;!0&gt; items)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubBindableCollection`1.AddRangeIEnumerableOfT0">
            <summary>Sets the stub of BindableCollection`1.AddRange(IEnumerable`1&lt;!0&gt; items)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubBindableCollection`1.ClearItemsBase">
            <summary>Sets the stub of BindableCollection`1.ClearItemsBase()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubBindableCollection`1.ClearItemsBase01">
            <summary>Sets the stub of BindableCollection`1.ClearItemsBase()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubBindableCollection`1.InitializeStub">
            <summary>Initializes a new instance of type StubBindableCollection</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubBindableCollection`1.InsertItemBase(System.Int32,`0)">
            <summary>Sets the stub of BindableCollection`1.InsertItemBase(Int32 index, !0 item)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubBindableCollection`1.InsertItemBaseInt32T0">
            <summary>Sets the stub of BindableCollection`1.InsertItemBase(Int32 index, !0 item)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubBindableCollection`1.MoveItem(System.Int32,System.Int32)">
            <summary>Sets the stub of ObservableCollection`1.MoveItem(Int32 oldIndex, Int32 newIndex)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubBindableCollection`1.MoveItemInt32Int32">
            <summary>Sets the stub of ObservableCollection`1.MoveItem(Int32 oldIndex, Int32 newIndex)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubBindableCollection`1.NotifyOfPropertyChange(System.String)">
            <summary>Sets the stub of BindableCollection`1.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubBindableCollection`1.NotifyOfPropertyChangeString">
            <summary>Sets the stub of BindableCollection`1.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubBindableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Sets the stub of BindableCollection`1.OnCollectionChanged(NotifyCollectionChangedEventArgs e)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubBindableCollection`1.OnCollectionChangedNotifyCollectionChangedEventArgs">
            <summary>Sets the stub of BindableCollection`1.OnCollectionChanged(NotifyCollectionChangedEventArgs e)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubBindableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Sets the stub of BindableCollection`1.OnPropertyChanged(PropertyChangedEventArgs e)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubBindableCollection`1.OnPropertyChangedPropertyChangedEventArgs">
            <summary>Sets the stub of BindableCollection`1.OnPropertyChanged(PropertyChangedEventArgs e)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubBindableCollection`1.RemoveItemBase(System.Int32)">
            <summary>Sets the stub of BindableCollection`1.RemoveItemBase(Int32 index)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubBindableCollection`1.RemoveItemBaseInt32">
            <summary>Sets the stub of BindableCollection`1.RemoveItemBase(Int32 index)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubBindableCollection`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>Sets the stub of BindableCollection`1.RemoveRange(IEnumerable`1&lt;!0&gt; items)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubBindableCollection`1.RemoveRangeIEnumerableOfT0">
            <summary>Sets the stub of BindableCollection`1.RemoveRange(IEnumerable`1&lt;!0&gt; items)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubBindableCollection`1.SetItemBase(System.Int32,`0)">
            <summary>Sets the stub of BindableCollection`1.SetItemBase(Int32 index, !0 item)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubBindableCollection`1.SetItemBaseInt32T0">
            <summary>Sets the stub of BindableCollection`1.SetItemBase(Int32 index, !0 item)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubBindableCollection`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubBindableCollection`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubBindableCollection`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubConductor`1">
            <summary>Stub type of Caliburn.Micro.Conductor`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductor`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductor`1.ActivateItem(`0)">
            <summary>Sets the stub of Conductor`1.ActivateItem(!0 item)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductor`1.ActivateItemT0">
            <summary>Sets the stub of Conductor`1.ActivateItem(!0 item)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductor`1.AttachBackingFieldToDisplayName">
            <summary>Attaches delegates to emulate StubConductor.DisplayName as a property with a backing field.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductor`1.AttachBackingFieldToParent">
            <summary>Attaches delegates to emulate StubConductor.Parent as a property with a backing field.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductor`1.CanClose(System.Action{System.Boolean})">
            <summary>Sets the stub of Conductor`1.CanClose(Action`1&lt;Boolean&gt; callback)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductor`1.CanCloseActionOfBoolean">
            <summary>Sets the stub of Conductor`1.CanClose(Action`1&lt;Boolean&gt; callback)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductor`1.ChangeActiveItem(`0,System.Boolean)">
            <summary>Sets the stub of ConductorBaseWithActiveItem`1.ChangeActiveItem(!0 newItem, Boolean closePrevious)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductor`1.ChangeActiveItemT0Boolean">
            <summary>Sets the stub of ConductorBaseWithActiveItem`1.ChangeActiveItem(!0 newItem, Boolean closePrevious)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductor`1.DeactivateItem(`0,System.Boolean)">
            <summary>Sets the stub of Conductor`1.DeactivateItem(!0 item, Boolean close)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductor`1.DeactivateItemT0Boolean">
            <summary>Sets the stub of Conductor`1.DeactivateItem(!0 item, Boolean close)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductor`1.DisplayNameGet">
            <summary>Sets the stub of Screen.get_DisplayName()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductor`1.DisplayNameSetString">
            <summary>Sets the stub of Screen.set_DisplayName(String value)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductor`1.EnsureItem(`0)">
            <summary>Sets the stub of ConductorBase`1.EnsureItem(!0 newItem)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductor`1.EnsureItemT0">
            <summary>Sets the stub of ConductorBase`1.EnsureItem(!0 newItem)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductor`1.GetChildren">
            <summary>Sets the stub of Conductor`1.GetChildren()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductor`1.GetChildren01">
            <summary>Sets the stub of Conductor`1.GetChildren()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductor`1.InitializeStub">
            <summary>Initializes a new instance of type StubConductor</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductor`1.NotifyOfPropertyChange(System.String)">
            <summary>Sets the stub of PropertyChangedBase.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductor`1.NotifyOfPropertyChangeString">
            <summary>Sets the stub of PropertyChangedBase.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductor`1.OnActivate">
            <summary>Sets the stub of Conductor`1.OnActivate()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductor`1.OnActivate01">
            <summary>Sets the stub of Conductor`1.OnActivate()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductor`1.OnActivationProcessed(`0,System.Boolean)">
            <summary>Sets the stub of ConductorBase`1.OnActivationProcessed(!0 item, Boolean success)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductor`1.OnActivationProcessedT0Boolean">
            <summary>Sets the stub of ConductorBase`1.OnActivationProcessed(!0 item, Boolean success)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductor`1.OnDeactivate(System.Boolean)">
            <summary>Sets the stub of Conductor`1.OnDeactivate(Boolean close)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductor`1.OnDeactivateBoolean">
            <summary>Sets the stub of Conductor`1.OnDeactivate(Boolean close)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductor`1.OnInitialize">
            <summary>Sets the stub of Screen.OnInitialize()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductor`1.OnInitialize01">
            <summary>Sets the stub of Screen.OnInitialize()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductor`1.OnViewAttached(System.Object,System.Object)">
            <summary>Sets the stub of ViewAware.OnViewAttached(Object view, Object context)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductor`1.OnViewAttachedObjectObject">
            <summary>Sets the stub of ViewAware.OnViewAttached(Object view, Object context)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductor`1.OnViewLoaded(System.Object)">
            <summary>Sets the stub of ViewAware.OnViewLoaded(Object view)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductor`1.OnViewLoadedObject">
            <summary>Sets the stub of ViewAware.OnViewLoaded(Object view)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductor`1.OnViewReady(System.Object)">
            <summary>Sets the stub of ViewAware.OnViewReady(Object view)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductor`1.OnViewReadyObject">
            <summary>Sets the stub of ViewAware.OnViewReady(Object view)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductor`1.ParentGet">
            <summary>Sets the stub of Screen.get_Parent()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductor`1.ParentSetObject">
            <summary>Sets the stub of Screen.set_Parent(Object value)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductor`1.TryClose(System.Nullable{System.Boolean})">
            <summary>Sets the stub of Screen.TryClose(Nullable`1&lt;Boolean&gt; dialogResult)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductor`1.TryCloseNullableOfBoolean">
            <summary>Sets the stub of Screen.TryClose(Nullable`1&lt;Boolean&gt; dialogResult)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubConductor`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubConductor`1.DisplayName">
            <summary>Sets the stub of Screen.get_DisplayName()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubConductor`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubConductor`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubConductor`1.Parent">
            <summary>Sets the stub of Screen.get_Parent()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubConductorBase`1">
            <summary>Stub type of Caliburn.Micro.ConductorBase`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBase`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBase`1.ActivateItem(`0)">
            <summary>Sets the stub of ConductorBase`1.ActivateItem(!0 item)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBase`1.ActivateItemT0">
            <summary>Sets the stub of ConductorBase`1.ActivateItem(!0 item)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBase`1.AttachBackingFieldToDisplayName">
            <summary>Attaches delegates to emulate StubConductorBase.DisplayName as a property with a backing field.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBase`1.AttachBackingFieldToParent">
            <summary>Attaches delegates to emulate StubConductorBase.Parent as a property with a backing field.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBase`1.CanClose(System.Action{System.Boolean})">
            <summary>Sets the stub of Screen.CanClose(Action`1&lt;Boolean&gt; callback)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBase`1.CanCloseActionOfBoolean">
            <summary>Sets the stub of Screen.CanClose(Action`1&lt;Boolean&gt; callback)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBase`1.DeactivateItem(`0,System.Boolean)">
            <summary>Sets the stub of ConductorBase`1.DeactivateItem(!0 item, Boolean close)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBase`1.DeactivateItemT0Boolean">
            <summary>Sets the stub of ConductorBase`1.DeactivateItem(!0 item, Boolean close)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBase`1.DisplayNameGet">
            <summary>Sets the stub of Screen.get_DisplayName()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBase`1.DisplayNameSetString">
            <summary>Sets the stub of Screen.set_DisplayName(String value)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBase`1.EnsureItem(`0)">
            <summary>Sets the stub of ConductorBase`1.EnsureItem(!0 newItem)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBase`1.EnsureItemT0">
            <summary>Sets the stub of ConductorBase`1.EnsureItem(!0 newItem)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBase`1.GetChildren">
            <summary>Sets the stub of ConductorBase`1.GetChildren()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBase`1.GetChildren01">
            <summary>Sets the stub of ConductorBase`1.GetChildren()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBase`1.InitializeStub">
            <summary>Initializes a new instance of type StubConductorBase</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBase`1.NotifyOfPropertyChange(System.String)">
            <summary>Sets the stub of PropertyChangedBase.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBase`1.NotifyOfPropertyChangeString">
            <summary>Sets the stub of PropertyChangedBase.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBase`1.OnActivate">
            <summary>Sets the stub of Screen.OnActivate()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBase`1.OnActivate01">
            <summary>Sets the stub of Screen.OnActivate()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBase`1.OnActivationProcessed(`0,System.Boolean)">
            <summary>Sets the stub of ConductorBase`1.OnActivationProcessed(!0 item, Boolean success)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBase`1.OnActivationProcessedT0Boolean">
            <summary>Sets the stub of ConductorBase`1.OnActivationProcessed(!0 item, Boolean success)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBase`1.OnDeactivate(System.Boolean)">
            <summary>Sets the stub of Screen.OnDeactivate(Boolean close)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBase`1.OnDeactivateBoolean">
            <summary>Sets the stub of Screen.OnDeactivate(Boolean close)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBase`1.OnInitialize">
            <summary>Sets the stub of Screen.OnInitialize()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBase`1.OnInitialize01">
            <summary>Sets the stub of Screen.OnInitialize()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBase`1.OnViewAttached(System.Object,System.Object)">
            <summary>Sets the stub of ViewAware.OnViewAttached(Object view, Object context)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBase`1.OnViewAttachedObjectObject">
            <summary>Sets the stub of ViewAware.OnViewAttached(Object view, Object context)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBase`1.OnViewLoaded(System.Object)">
            <summary>Sets the stub of ViewAware.OnViewLoaded(Object view)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBase`1.OnViewLoadedObject">
            <summary>Sets the stub of ViewAware.OnViewLoaded(Object view)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBase`1.OnViewReady(System.Object)">
            <summary>Sets the stub of ViewAware.OnViewReady(Object view)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBase`1.OnViewReadyObject">
            <summary>Sets the stub of ViewAware.OnViewReady(Object view)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBase`1.ParentGet">
            <summary>Sets the stub of Screen.get_Parent()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBase`1.ParentSetObject">
            <summary>Sets the stub of Screen.set_Parent(Object value)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBase`1.TryClose(System.Nullable{System.Boolean})">
            <summary>Sets the stub of Screen.TryClose(Nullable`1&lt;Boolean&gt; dialogResult)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBase`1.TryCloseNullableOfBoolean">
            <summary>Sets the stub of Screen.TryClose(Nullable`1&lt;Boolean&gt; dialogResult)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubConductorBase`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubConductorBase`1.DisplayName">
            <summary>Sets the stub of Screen.get_DisplayName()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubConductorBase`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubConductorBase`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubConductorBase`1.Parent">
            <summary>Sets the stub of Screen.get_Parent()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1">
            <summary>Stub type of Caliburn.Micro.ConductorBaseWithActiveItem`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.ActivateItem(`0)">
            <summary>Sets the stub of ConductorBase`1.ActivateItem(!0 item)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.ActivateItemT0">
            <summary>Sets the stub of ConductorBase`1.ActivateItem(!0 item)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.AttachBackingFieldToDisplayName">
            <summary>Attaches delegates to emulate StubConductorBaseWithActiveItem.DisplayName as a property with a backing field.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.AttachBackingFieldToParent">
            <summary>Attaches delegates to emulate StubConductorBaseWithActiveItem.Parent as a property with a backing field.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.CanClose(System.Action{System.Boolean})">
            <summary>Sets the stub of Screen.CanClose(Action`1&lt;Boolean&gt; callback)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.CanCloseActionOfBoolean">
            <summary>Sets the stub of Screen.CanClose(Action`1&lt;Boolean&gt; callback)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.ChangeActiveItem(`0,System.Boolean)">
            <summary>Sets the stub of ConductorBaseWithActiveItem`1.ChangeActiveItem(!0 newItem, Boolean closePrevious)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.ChangeActiveItemT0Boolean">
            <summary>Sets the stub of ConductorBaseWithActiveItem`1.ChangeActiveItem(!0 newItem, Boolean closePrevious)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.DeactivateItem(`0,System.Boolean)">
            <summary>Sets the stub of ConductorBase`1.DeactivateItem(!0 item, Boolean close)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.DeactivateItemT0Boolean">
            <summary>Sets the stub of ConductorBase`1.DeactivateItem(!0 item, Boolean close)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.DisplayNameGet">
            <summary>Sets the stub of Screen.get_DisplayName()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.DisplayNameSetString">
            <summary>Sets the stub of Screen.set_DisplayName(String value)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.EnsureItem(`0)">
            <summary>Sets the stub of ConductorBase`1.EnsureItem(!0 newItem)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.EnsureItemT0">
            <summary>Sets the stub of ConductorBase`1.EnsureItem(!0 newItem)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.GetChildren">
            <summary>Sets the stub of ConductorBase`1.GetChildren()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.GetChildren01">
            <summary>Sets the stub of ConductorBase`1.GetChildren()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.InitializeStub">
            <summary>Initializes a new instance of type StubConductorBaseWithActiveItem</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.NotifyOfPropertyChange(System.String)">
            <summary>Sets the stub of PropertyChangedBase.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.NotifyOfPropertyChangeString">
            <summary>Sets the stub of PropertyChangedBase.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.OnActivate">
            <summary>Sets the stub of Screen.OnActivate()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.OnActivate01">
            <summary>Sets the stub of Screen.OnActivate()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.OnActivationProcessed(`0,System.Boolean)">
            <summary>Sets the stub of ConductorBase`1.OnActivationProcessed(!0 item, Boolean success)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.OnActivationProcessedT0Boolean">
            <summary>Sets the stub of ConductorBase`1.OnActivationProcessed(!0 item, Boolean success)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.OnDeactivate(System.Boolean)">
            <summary>Sets the stub of Screen.OnDeactivate(Boolean close)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.OnDeactivateBoolean">
            <summary>Sets the stub of Screen.OnDeactivate(Boolean close)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.OnInitialize">
            <summary>Sets the stub of Screen.OnInitialize()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.OnInitialize01">
            <summary>Sets the stub of Screen.OnInitialize()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.OnViewAttached(System.Object,System.Object)">
            <summary>Sets the stub of ViewAware.OnViewAttached(Object view, Object context)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.OnViewAttachedObjectObject">
            <summary>Sets the stub of ViewAware.OnViewAttached(Object view, Object context)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.OnViewLoaded(System.Object)">
            <summary>Sets the stub of ViewAware.OnViewLoaded(Object view)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.OnViewLoadedObject">
            <summary>Sets the stub of ViewAware.OnViewLoaded(Object view)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.OnViewReady(System.Object)">
            <summary>Sets the stub of ViewAware.OnViewReady(Object view)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.OnViewReadyObject">
            <summary>Sets the stub of ViewAware.OnViewReady(Object view)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.ParentGet">
            <summary>Sets the stub of Screen.get_Parent()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.ParentSetObject">
            <summary>Sets the stub of Screen.set_Parent(Object value)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.TryClose(System.Nullable{System.Boolean})">
            <summary>Sets the stub of Screen.TryClose(Nullable`1&lt;Boolean&gt; dialogResult)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.TryCloseNullableOfBoolean">
            <summary>Sets the stub of Screen.TryClose(Nullable`1&lt;Boolean&gt; dialogResult)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.DisplayName">
            <summary>Sets the stub of Screen.get_DisplayName()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubConductorBaseWithActiveItem`1.Parent">
            <summary>Sets the stub of Screen.get_Parent()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubContinueResultDecorator">
            <summary>Stub type of Caliburn.Micro.ContinueResultDecorator</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubContinueResultDecorator.#ctor(Caliburn.Micro.IResult,System.Func{Caliburn.Micro.IResult})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubContinueResultDecorator.InitializeStub">
            <summary>Initializes a new instance of type StubContinueResultDecorator</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubContinueResultDecorator.OnInnerResultCompleted(Caliburn.Micro.CoroutineExecutionContext,Caliburn.Micro.IResult,Caliburn.Micro.ResultCompletionEventArgs)">
            <summary>Sets the stub of ContinueResultDecorator.OnInnerResultCompleted(CoroutineExecutionContext context, IResult innerResult, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubContinueResultDecorator.OnInnerResultCompletedCoroutineExecutionContextIResultResultCompletionEventArgs">
            <summary>Sets the stub of ContinueResultDecorator.OnInnerResultCompleted(CoroutineExecutionContext context, IResult innerResult, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubContinueResultDecorator.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubContinueResultDecorator.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubContinueResultDecorator.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubCoroutineExecutionContext">
            <summary>Stub type of Caliburn.Micro.CoroutineExecutionContext</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubCoroutineExecutionContext.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubCoroutineExecutionContext.InitializeStub">
            <summary>Initializes a new instance of type StubCoroutineExecutionContext</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubCoroutineExecutionContext.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubCoroutineExecutionContext.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubCoroutineExecutionContext.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubDeactivationEventArgs">
            <summary>Stub type of Caliburn.Micro.DeactivationEventArgs</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubDeactivationEventArgs.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubDeactivationEventArgs.InitializeStub">
            <summary>Initializes a new instance of type StubDeactivationEventArgs</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubDeactivationEventArgs.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubDeactivationEventArgs.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubDeactivationEventArgs.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubDebugLog">
            <summary>Stub type of Caliburn.Micro.DebugLog</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubDebugLog.#ctor(System.Type)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubDebugLog.InitializeStub">
            <summary>Initializes a new instance of type StubDebugLog</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubDebugLog.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubDebugLog.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubDebugLog.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubDefaultCloseStrategy`1">
            <summary>Stub type of Caliburn.Micro.DefaultCloseStrategy`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubDefaultCloseStrategy`1.#ctor(System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubDefaultCloseStrategy`1.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultCloseStrategy</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubDefaultCloseStrategy`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubDefaultCloseStrategy`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubDefaultCloseStrategy`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubDefaultPlatformProvider">
            <summary>Stub type of Caliburn.Micro.DefaultPlatformProvider</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubDefaultPlatformProvider.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubDefaultPlatformProvider.InitializeStub">
            <summary>Initializes a new instance of type StubDefaultPlatformProvider</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubDefaultPlatformProvider.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubDefaultPlatformProvider.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubDefaultPlatformProvider.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubDelegateResult">
            <summary>Stub type of Caliburn.Micro.DelegateResult</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubDelegateResult.#ctor(System.Action)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubDelegateResult.InitializeStub">
            <summary>Initializes a new instance of type StubDelegateResult</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubDelegateResult.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubDelegateResult.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubDelegateResult.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubDelegateResult`1">
            <summary>Stub type of Caliburn.Micro.DelegateResult`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubDelegateResult`1.#ctor(System.Func{`0})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubDelegateResult`1.InitializeStub">
            <summary>Initializes a new instance of type StubDelegateResult</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubDelegateResult`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubDelegateResult`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubDelegateResult`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubEventAggregator">
            <summary>Stub type of Caliburn.Micro.EventAggregator</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubEventAggregator.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubEventAggregator.InitializeStub">
            <summary>Initializes a new instance of type StubEventAggregator</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubEventAggregator.Publish(System.Object,System.Action{System.Action})">
            <summary>Sets the stub of EventAggregator.Publish(Object message, Action`1&lt;Action&gt; marshal)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubEventAggregator.PublishObjectActionOfAction">
            <summary>Sets the stub of EventAggregator.Publish(Object message, Action`1&lt;Action&gt; marshal)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubEventAggregator.Subscribe(System.Object)">
            <summary>Sets the stub of EventAggregator.Subscribe(Object subscriber)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubEventAggregator.SubscribeObject">
            <summary>Sets the stub of EventAggregator.Subscribe(Object subscriber)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubEventAggregator.Unsubscribe(System.Object)">
            <summary>Sets the stub of EventAggregator.Unsubscribe(Object subscriber)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubEventAggregator.UnsubscribeObject">
            <summary>Sets the stub of EventAggregator.Unsubscribe(Object subscriber)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubEventAggregator.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubEventAggregator.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubEventAggregator.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIActivate">
            <summary>Stub type of Caliburn.Micro.IActivate</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIActivate.#ctor">
            <summary>Initializes a new instance of type StubIActivate</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIActivate.Activate">
            <summary>Sets the stub of IActivate.Activate()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIActivate.cm::Caliburn#Micro#IActivate#Activate">
            <summary>Sets the stub of IActivate.Activate()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIActivate.IsActiveGet">
            <summary>Sets the stub of IActivate.get_IsActive()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubIActivate.cm::Caliburn#Micro#IActivate#IsActive">
            <summary>Sets the stub of IActivate.get_IsActive()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIChild">
            <summary>Stub type of Caliburn.Micro.IChild</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIChild.#ctor">
            <summary>Initializes a new instance of type StubIChild</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIChild.AttachBackingFieldToParent">
            <summary>Attaches delegates to emulate StubIChild.Parent as a property with a backing field.</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIChild.ParentGet">
            <summary>Sets the stub of IChild.get_Parent()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIChild.ParentSetObject">
            <summary>Sets the stub of IChild.set_Parent(Object value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubIChild.cm::Caliburn#Micro#IChild#Parent">
            <summary>Sets the stub of IChild.get_Parent()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIChild`1">
            <summary>Stub type of Caliburn.Micro.IChild`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIChild`1.#ctor">
            <summary>Initializes a new instance of type StubIChild</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIChild`1.AttachBackingFieldToParent">
            <summary>Attaches delegates to emulate StubIChild.Parent as a property with a backing field.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIChild`1.AttachBackingFieldToParent01">
            <summary>Attaches delegates to emulate StubIChild.Parent as a property with a backing field.</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIChild`1.ParentGet">
            <summary>Sets the stub of IChild`1.get_Parent()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIChild`1.ParentGet01">
            <summary>Sets the stub of IChild.get_Parent()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIChild`1.ParentSetObject">
            <summary>Sets the stub of IChild.set_Parent(Object value)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIChild`1.ParentSetT0">
            <summary>Sets the stub of IChild`1.set_Parent(!0 value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubIChild`1.cm::Caliburn#Micro#IChild#Parent">
            <summary>Sets the stub of IChild.get_Parent()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubIChild`1.cm::Caliburn#Micro#IChild{TParent}#Parent">
            <summary>Sets the stub of IChild`1.get_Parent()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIClose">
            <summary>Stub type of Caliburn.Micro.IClose</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIClose.#ctor">
            <summary>Initializes a new instance of type StubIClose</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIClose.cm::Caliburn#Micro#IClose#TryClose(System.Nullable{System.Boolean})">
            <summary>Sets the stub of IClose.TryClose(Nullable`1&lt;Boolean&gt; dialogResult)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIClose.TryCloseNullableOfBoolean">
            <summary>Sets the stub of IClose.TryClose(Nullable`1&lt;Boolean&gt; dialogResult)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubICloseStrategy`1">
            <summary>Stub type of Caliburn.Micro.ICloseStrategy`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubICloseStrategy`1.#ctor">
            <summary>Initializes a new instance of type StubICloseStrategy</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubICloseStrategy`1.cm::Caliburn#Micro#ICloseStrategy{T}#Execute(System.Collections.Generic.IEnumerable{`0},System.Action{System.Boolean,System.Collections.Generic.IEnumerable{`0}})">
            <summary>Sets the stub of ICloseStrategy`1.Execute(IEnumerable`1&lt;!0&gt; toClose, Action`2&lt;Boolean,IEnumerable`1&lt;!0&gt;&gt; callback)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubICloseStrategy`1.ExecuteIEnumerableOfT0ActionOfBooleanIEnumerableOfT0">
            <summary>Sets the stub of ICloseStrategy`1.Execute(IEnumerable`1&lt;!0&gt; toClose, Action`2&lt;Boolean,IEnumerable`1&lt;!0&gt;&gt; callback)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIConductActiveItem">
            <summary>Stub type of Caliburn.Micro.IConductActiveItem</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIConductActiveItem.#ctor">
            <summary>Initializes a new instance of type StubIConductActiveItem</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIConductActiveItem.ActivateItemObject">
            <summary>Sets the stub of IConductor.ActivateItem(Object item)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIConductActiveItem.ActiveItemGet">
            <summary>Sets the stub of IHaveActiveItem.get_ActiveItem()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIConductActiveItem.ActiveItemSetObject">
            <summary>Sets the stub of IHaveActiveItem.set_ActiveItem(Object value)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIConductActiveItem.AttachBackingFieldToActiveItem">
            <summary>Attaches delegates to emulate StubIConductActiveItem.ActiveItem as a property with a backing field.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIConductActiveItem.AttachBackingFieldToIsNotifying">
            <summary>Attaches delegates to emulate StubIConductActiveItem.IsNotifying as a property with a backing field.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIConductActiveItem.cm::Caliburn#Micro#IConductor#ActivateItem(System.Object)">
            <summary>Sets the stub of IConductor.ActivateItem(Object item)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIConductActiveItem.cm::Caliburn#Micro#IConductor#DeactivateItem(System.Object,System.Boolean)">
            <summary>Sets the stub of IConductor.DeactivateItem(Object item, Boolean close)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIConductActiveItem.cm::Caliburn#Micro#INotifyPropertyChangedEx#NotifyOfPropertyChange(System.String)">
            <summary>Sets the stub of INotifyPropertyChangedEx.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIConductActiveItem.cm::Caliburn#Micro#INotifyPropertyChangedEx#Refresh">
            <summary>Sets the stub of INotifyPropertyChangedEx.Refresh()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIConductActiveItem.cm::Caliburn#Micro#IParent#GetChildren">
            <summary>Sets the stub of IParent.GetChildren()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIConductActiveItem.DeactivateItemObjectBoolean">
            <summary>Sets the stub of IConductor.DeactivateItem(Object item, Boolean close)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIConductActiveItem.GetChildren">
            <summary>Sets the stub of IParent.GetChildren()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIConductActiveItem.IsNotifyingGet">
            <summary>Sets the stub of INotifyPropertyChangedEx.get_IsNotifying()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIConductActiveItem.IsNotifyingSetBoolean">
            <summary>Sets the stub of INotifyPropertyChangedEx.set_IsNotifying(Boolean value)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIConductActiveItem.NotifyOfPropertyChangeString">
            <summary>Sets the stub of INotifyPropertyChangedEx.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIConductActiveItem.Refresh">
            <summary>Sets the stub of INotifyPropertyChangedEx.Refresh()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubIConductActiveItem.cm::Caliburn#Micro#IHaveActiveItem#ActiveItem">
            <summary>Sets the stub of IHaveActiveItem.get_ActiveItem()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubIConductActiveItem.cm::Caliburn#Micro#INotifyPropertyChangedEx#IsNotifying">
            <summary>Sets the stub of INotifyPropertyChangedEx.get_IsNotifying()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIConductor">
            <summary>Stub type of Caliburn.Micro.IConductor</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIConductor.#ctor">
            <summary>Initializes a new instance of type StubIConductor</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIConductor.ActivateItemObject">
            <summary>Sets the stub of IConductor.ActivateItem(Object item)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIConductor.AttachBackingFieldToIsNotifying">
            <summary>Attaches delegates to emulate StubIConductor.IsNotifying as a property with a backing field.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIConductor.cm::Caliburn#Micro#IConductor#ActivateItem(System.Object)">
            <summary>Sets the stub of IConductor.ActivateItem(Object item)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIConductor.cm::Caliburn#Micro#IConductor#DeactivateItem(System.Object,System.Boolean)">
            <summary>Sets the stub of IConductor.DeactivateItem(Object item, Boolean close)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIConductor.cm::Caliburn#Micro#INotifyPropertyChangedEx#NotifyOfPropertyChange(System.String)">
            <summary>Sets the stub of INotifyPropertyChangedEx.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIConductor.cm::Caliburn#Micro#INotifyPropertyChangedEx#Refresh">
            <summary>Sets the stub of INotifyPropertyChangedEx.Refresh()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIConductor.cm::Caliburn#Micro#IParent#GetChildren">
            <summary>Sets the stub of IParent.GetChildren()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIConductor.DeactivateItemObjectBoolean">
            <summary>Sets the stub of IConductor.DeactivateItem(Object item, Boolean close)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIConductor.GetChildren">
            <summary>Sets the stub of IParent.GetChildren()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIConductor.IsNotifyingGet">
            <summary>Sets the stub of INotifyPropertyChangedEx.get_IsNotifying()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIConductor.IsNotifyingSetBoolean">
            <summary>Sets the stub of INotifyPropertyChangedEx.set_IsNotifying(Boolean value)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIConductor.NotifyOfPropertyChangeString">
            <summary>Sets the stub of INotifyPropertyChangedEx.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIConductor.Refresh">
            <summary>Sets the stub of INotifyPropertyChangedEx.Refresh()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubIConductor.cm::Caliburn#Micro#INotifyPropertyChangedEx#IsNotifying">
            <summary>Sets the stub of INotifyPropertyChangedEx.get_IsNotifying()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIDeactivate">
            <summary>Stub type of Caliburn.Micro.IDeactivate</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIDeactivate.#ctor">
            <summary>Initializes a new instance of type StubIDeactivate</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIDeactivate.cm::Caliburn#Micro#IDeactivate#Deactivate(System.Boolean)">
            <summary>Sets the stub of IDeactivate.Deactivate(Boolean close)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIDeactivate.DeactivateBoolean">
            <summary>Sets the stub of IDeactivate.Deactivate(Boolean close)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIEventAggregator">
            <summary>Stub type of Caliburn.Micro.IEventAggregator</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIEventAggregator.#ctor">
            <summary>Initializes a new instance of type StubIEventAggregator</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIEventAggregator.cm::Caliburn#Micro#IEventAggregator#HandlerExistsFor(System.Type)">
            <summary>Sets the stub of IEventAggregator.HandlerExistsFor(Type messageType)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIEventAggregator.cm::Caliburn#Micro#IEventAggregator#Publish(System.Object,System.Action{System.Action})">
            <summary>Sets the stub of IEventAggregator.Publish(Object message, Action`1&lt;Action&gt; marshal)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIEventAggregator.cm::Caliburn#Micro#IEventAggregator#Subscribe(System.Object)">
            <summary>Sets the stub of IEventAggregator.Subscribe(Object subscriber)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIEventAggregator.cm::Caliburn#Micro#IEventAggregator#Unsubscribe(System.Object)">
            <summary>Sets the stub of IEventAggregator.Unsubscribe(Object subscriber)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIEventAggregator.HandlerExistsForType">
            <summary>Sets the stub of IEventAggregator.HandlerExistsFor(Type messageType)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIEventAggregator.PublishObjectActionOfAction">
            <summary>Sets the stub of IEventAggregator.Publish(Object message, Action`1&lt;Action&gt; marshal)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIEventAggregator.SubscribeObject">
            <summary>Sets the stub of IEventAggregator.Subscribe(Object subscriber)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIEventAggregator.UnsubscribeObject">
            <summary>Sets the stub of IEventAggregator.Unsubscribe(Object subscriber)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIGuardClose">
            <summary>Stub type of Caliburn.Micro.IGuardClose</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIGuardClose.#ctor">
            <summary>Initializes a new instance of type StubIGuardClose</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIGuardClose.cm::Caliburn#Micro#IClose#TryClose(System.Nullable{System.Boolean})">
            <summary>Sets the stub of IClose.TryClose(Nullable`1&lt;Boolean&gt; dialogResult)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIGuardClose.cm::Caliburn#Micro#IGuardClose#CanClose(System.Action{System.Boolean})">
            <summary>Sets the stub of IGuardClose.CanClose(Action`1&lt;Boolean&gt; callback)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIGuardClose.CanCloseActionOfBoolean">
            <summary>Sets the stub of IGuardClose.CanClose(Action`1&lt;Boolean&gt; callback)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIGuardClose.TryCloseNullableOfBoolean">
            <summary>Sets the stub of IClose.TryClose(Nullable`1&lt;Boolean&gt; dialogResult)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIHandle">
            <summary>Stub type of Caliburn.Micro.IHandle</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIHandle.#ctor">
            <summary>Initializes a new instance of type StubIHandle</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIHandle`1">
            <summary>Stub type of Caliburn.Micro.IHandle`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIHandle`1.#ctor">
            <summary>Initializes a new instance of type StubIHandle</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIHandle`1.cm::Caliburn#Micro#IHandle{TMessage}#Handle(`0)">
            <summary>Sets the stub of IHandle`1.Handle(!0 message)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIHandle`1.HandleT0">
            <summary>Sets the stub of IHandle`1.Handle(!0 message)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIHandleWithCoroutine`1">
            <summary>Stub type of Caliburn.Micro.IHandleWithCoroutine`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIHandleWithCoroutine`1.#ctor">
            <summary>Initializes a new instance of type StubIHandleWithCoroutine</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIHandleWithCoroutine`1.cm::Caliburn#Micro#IHandleWithCoroutine{TMessage}#Handle(`0)">
            <summary>Sets the stub of IHandleWithCoroutine`1.Handle(!0 message)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIHandleWithCoroutine`1.HandleT0">
            <summary>Sets the stub of IHandleWithCoroutine`1.Handle(!0 message)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIHandleWithTask`1">
            <summary>Stub type of Caliburn.Micro.IHandleWithTask`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIHandleWithTask`1.#ctor">
            <summary>Initializes a new instance of type StubIHandleWithTask</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIHandleWithTask`1.cm::Caliburn#Micro#IHandleWithTask{TMessage}#Handle(`0)">
            <summary>Sets the stub of IHandleWithTask`1.Handle(!0 message)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIHandleWithTask`1.HandleT0">
            <summary>Sets the stub of IHandleWithTask`1.Handle(!0 message)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIHaveActiveItem">
            <summary>Stub type of Caliburn.Micro.IHaveActiveItem</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIHaveActiveItem.#ctor">
            <summary>Initializes a new instance of type StubIHaveActiveItem</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIHaveActiveItem.ActiveItemGet">
            <summary>Sets the stub of IHaveActiveItem.get_ActiveItem()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIHaveActiveItem.ActiveItemSetObject">
            <summary>Sets the stub of IHaveActiveItem.set_ActiveItem(Object value)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIHaveActiveItem.AttachBackingFieldToActiveItem">
            <summary>Attaches delegates to emulate StubIHaveActiveItem.ActiveItem as a property with a backing field.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubIHaveActiveItem.cm::Caliburn#Micro#IHaveActiveItem#ActiveItem">
            <summary>Sets the stub of IHaveActiveItem.get_ActiveItem()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIHaveDisplayName">
            <summary>Stub type of Caliburn.Micro.IHaveDisplayName</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIHaveDisplayName.#ctor">
            <summary>Initializes a new instance of type StubIHaveDisplayName</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIHaveDisplayName.AttachBackingFieldToDisplayName">
            <summary>Attaches delegates to emulate StubIHaveDisplayName.DisplayName as a property with a backing field.</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIHaveDisplayName.DisplayNameGet">
            <summary>Sets the stub of IHaveDisplayName.get_DisplayName()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIHaveDisplayName.DisplayNameSetString">
            <summary>Sets the stub of IHaveDisplayName.set_DisplayName(String value)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubIHaveDisplayName.cm::Caliburn#Micro#IHaveDisplayName#DisplayName">
            <summary>Sets the stub of IHaveDisplayName.get_DisplayName()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubILog">
            <summary>Stub type of Caliburn.Micro.ILog</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubILog.#ctor">
            <summary>Initializes a new instance of type StubILog</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubILog.cm::Caliburn#Micro#ILog#Error(System.Exception)">
            <summary>Sets the stub of ILog.Error(Exception exception)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubILog.cm::Caliburn#Micro#ILog#Info(System.String,System.Object[])">
            <summary>Sets the stub of ILog.Info(String format, Object[] args)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubILog.cm::Caliburn#Micro#ILog#Warn(System.String,System.Object[])">
            <summary>Sets the stub of ILog.Warn(String format, Object[] args)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubILog.ErrorException">
            <summary>Sets the stub of ILog.Error(Exception exception)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubILog.InfoStringObjectArray">
            <summary>Sets the stub of ILog.Info(String format, Object[] args)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubILog.WarnStringObjectArray">
            <summary>Sets the stub of ILog.Warn(String format, Object[] args)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubINotifyPropertyChangedEx">
            <summary>Stub type of Caliburn.Micro.INotifyPropertyChangedEx</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubINotifyPropertyChangedEx.#ctor">
            <summary>Initializes a new instance of type StubINotifyPropertyChangedEx</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubINotifyPropertyChangedEx.AttachBackingFieldToIsNotifying">
            <summary>Attaches delegates to emulate StubINotifyPropertyChangedEx.IsNotifying as a property with a backing field.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubINotifyPropertyChangedEx.cm::Caliburn#Micro#INotifyPropertyChangedEx#NotifyOfPropertyChange(System.String)">
            <summary>Sets the stub of INotifyPropertyChangedEx.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubINotifyPropertyChangedEx.cm::Caliburn#Micro#INotifyPropertyChangedEx#Refresh">
            <summary>Sets the stub of INotifyPropertyChangedEx.Refresh()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubINotifyPropertyChangedEx.IsNotifyingGet">
            <summary>Sets the stub of INotifyPropertyChangedEx.get_IsNotifying()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubINotifyPropertyChangedEx.IsNotifyingSetBoolean">
            <summary>Sets the stub of INotifyPropertyChangedEx.set_IsNotifying(Boolean value)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubINotifyPropertyChangedEx.NotifyOfPropertyChangeString">
            <summary>Sets the stub of INotifyPropertyChangedEx.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubINotifyPropertyChangedEx.Refresh">
            <summary>Sets the stub of INotifyPropertyChangedEx.Refresh()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubINotifyPropertyChangedEx.cm::Caliburn#Micro#INotifyPropertyChangedEx#IsNotifying">
            <summary>Sets the stub of INotifyPropertyChangedEx.get_IsNotifying()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIObservableCollection`1">
            <summary>Stub type of Caliburn.Micro.IObservableCollection`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIObservableCollection`1.#ctor">
            <summary>Initializes a new instance of type StubIObservableCollection</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIObservableCollection`1.AddRangeIEnumerableOfT0">
            <summary>Sets the stub of IObservableCollection`1.AddRange(IEnumerable`1&lt;!0&gt; items)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIObservableCollection`1.AddT0">
            <summary>Sets the stub of ICollection`1.Add(!0 item)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIObservableCollection`1.AttachBackingFieldToIsNotifying">
            <summary>Attaches delegates to emulate StubIObservableCollection.IsNotifying as a property with a backing field.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIObservableCollection`1.cm::Caliburn#Micro#INotifyPropertyChangedEx#NotifyOfPropertyChange(System.String)">
            <summary>Sets the stub of INotifyPropertyChangedEx.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIObservableCollection`1.cm::Caliburn#Micro#INotifyPropertyChangedEx#Refresh">
            <summary>Sets the stub of INotifyPropertyChangedEx.Refresh()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIObservableCollection`1.cm::Caliburn#Micro#IObservableCollection{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>Sets the stub of IObservableCollection`1.AddRange(IEnumerable`1&lt;!0&gt; items)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIObservableCollection`1.cm::Caliburn#Micro#IObservableCollection{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>Sets the stub of IObservableCollection`1.RemoveRange(IEnumerable`1&lt;!0&gt; items)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIObservableCollection`1.Clear">
            <summary>Sets the stub of ICollection`1.Clear()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIObservableCollection`1.ContainsT0">
            <summary>Sets the stub of ICollection`1.Contains(!0 item)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIObservableCollection`1.CopyToT0ArrayInt32">
            <summary>Sets the stub of ICollection`1.CopyTo(!0[] array, Int32 arrayIndex)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIObservableCollection`1.CountGet">
            <summary>Sets the stub of ICollection`1.get_Count()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIObservableCollection`1.GetEnumerator">
            <summary>Sets the stub of IEnumerable`1.GetEnumerator()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIObservableCollection`1.GetEnumerator01">
            <summary>Sets the stub of IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIObservableCollection`1.IndexOfT0">
            <summary>Sets the stub of IList`1.IndexOf(!0 item)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIObservableCollection`1.InsertInt32T0">
            <summary>Sets the stub of IList`1.Insert(Int32 index, !0 item)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIObservableCollection`1.IsNotifyingGet">
            <summary>Sets the stub of INotifyPropertyChangedEx.get_IsNotifying()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIObservableCollection`1.IsNotifyingSetBoolean">
            <summary>Sets the stub of INotifyPropertyChangedEx.set_IsNotifying(Boolean value)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIObservableCollection`1.IsReadOnlyGet">
            <summary>Sets the stub of ICollection`1.get_IsReadOnly()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIObservableCollection`1.ItemGetInt32">
            <summary>Sets the stub of IList`1.get_Item(Int32 index)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIObservableCollection`1.ItemSetInt32T0">
            <summary>Sets the stub of IList`1.set_Item(Int32 index, !0 value)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIObservableCollection`1.NotifyOfPropertyChangeString">
            <summary>Sets the stub of INotifyPropertyChangedEx.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIObservableCollection`1.Refresh">
            <summary>Sets the stub of INotifyPropertyChangedEx.Refresh()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIObservableCollection`1.RemoveAtInt32">
            <summary>Sets the stub of IList`1.RemoveAt(Int32 index)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIObservableCollection`1.RemoveRangeIEnumerableOfT0">
            <summary>Sets the stub of IObservableCollection`1.RemoveRange(IEnumerable`1&lt;!0&gt; items)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIObservableCollection`1.RemoveT0">
            <summary>Sets the stub of ICollection`1.Remove(!0 item)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIObservableCollection`1.global::System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>Sets the stub of ICollection`1.Add(!0 item)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIObservableCollection`1.global::System#Collections#Generic#ICollection{T}#Clear">
            <summary>Sets the stub of ICollection`1.Clear()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIObservableCollection`1.global::System#Collections#Generic#ICollection{T}#Contains(`0)">
            <summary>Sets the stub of ICollection`1.Contains(!0 item)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIObservableCollection`1.global::System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <summary>Sets the stub of ICollection`1.CopyTo(!0[] array, Int32 arrayIndex)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIObservableCollection`1.global::System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>Sets the stub of ICollection`1.Remove(!0 item)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIObservableCollection`1.global::System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Sets the stub of IEnumerable`1.GetEnumerator()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIObservableCollection`1.global::System#Collections#Generic#IList{T}#IndexOf(`0)">
            <summary>Sets the stub of IList`1.IndexOf(!0 item)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIObservableCollection`1.global::System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>Sets the stub of IList`1.Insert(Int32 index, !0 item)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIObservableCollection`1.global::System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
            <summary>Sets the stub of IList`1.RemoveAt(Int32 index)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIObservableCollection`1.global::System#Collections#IEnumerable#GetEnumerator">
            <summary>Sets the stub of IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubIObservableCollection`1.global::System#Collections#Generic#ICollection{T}#Count">
            <summary>Sets the stub of ICollection`1.get_Count()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubIObservableCollection`1.cm::Caliburn#Micro#INotifyPropertyChangedEx#IsNotifying">
            <summary>Sets the stub of INotifyPropertyChangedEx.get_IsNotifying()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubIObservableCollection`1.global::System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>Sets the stub of ICollection`1.get_IsReadOnly()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubIObservableCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
            <summary>Sets the stub of IList`1.get_Item(Int32 index)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIParent">
            <summary>Stub type of Caliburn.Micro.IParent</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIParent.#ctor">
            <summary>Initializes a new instance of type StubIParent</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIParent.cm::Caliburn#Micro#IParent#GetChildren">
            <summary>Sets the stub of IParent.GetChildren()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIParent.GetChildren">
            <summary>Sets the stub of IParent.GetChildren()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIParent`1">
            <summary>Stub type of Caliburn.Micro.IParent`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIParent`1.#ctor">
            <summary>Initializes a new instance of type StubIParent</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIParent`1.cm::Caliburn#Micro#IParent#GetChildren">
            <summary>Sets the stub of IParent.GetChildren()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIParent`1.cm::Caliburn#Micro#IParent{T}#GetChildren">
            <summary>Sets the stub of IParent`1.GetChildren()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIParent`1.GetChildren">
            <summary>Sets the stub of IParent`1.GetChildren()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIParent`1.GetChildren01">
            <summary>Sets the stub of IParent.GetChildren()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIPlatformProvider">
            <summary>Stub type of Caliburn.Micro.IPlatformProvider</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIPlatformProvider.#ctor">
            <summary>Initializes a new instance of type StubIPlatformProvider</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIPlatformProvider.BeginOnUIThreadAction">
            <summary>Sets the stub of IPlatformProvider.BeginOnUIThread(Action action)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIPlatformProvider.cm::Caliburn#Micro#IPlatformProvider#BeginOnUIThread(System.Action)">
            <summary>Sets the stub of IPlatformProvider.BeginOnUIThread(Action action)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIPlatformProvider.cm::Caliburn#Micro#IPlatformProvider#ExecuteOnFirstLoad(System.Object,System.Action{System.Object})">
            <summary>Sets the stub of IPlatformProvider.ExecuteOnFirstLoad(Object view, Action`1&lt;Object&gt; handler)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIPlatformProvider.cm::Caliburn#Micro#IPlatformProvider#ExecuteOnLayoutUpdated(System.Object,System.Action{System.Object})">
            <summary>Sets the stub of IPlatformProvider.ExecuteOnLayoutUpdated(Object view, Action`1&lt;Object&gt; handler)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIPlatformProvider.cm::Caliburn#Micro#IPlatformProvider#GetFirstNonGeneratedView(System.Object)">
            <summary>Sets the stub of IPlatformProvider.GetFirstNonGeneratedView(Object view)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIPlatformProvider.cm::Caliburn#Micro#IPlatformProvider#GetViewCloseAction(System.Object,System.Collections.Generic.ICollection{System.Object},System.Nullable{System.Boolean})">
            <summary>Sets the stub of IPlatformProvider.GetViewCloseAction(Object viewModel, ICollection`1&lt;Object&gt; views, Nullable`1&lt;Boolean&gt; dialogResult)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIPlatformProvider.cm::Caliburn#Micro#IPlatformProvider#OnUIThread(System.Action)">
            <summary>Sets the stub of IPlatformProvider.OnUIThread(Action action)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIPlatformProvider.cm::Caliburn#Micro#IPlatformProvider#OnUIThreadAsync(System.Action)">
            <summary>Sets the stub of IPlatformProvider.OnUIThreadAsync(Action action)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIPlatformProvider.ExecuteOnFirstLoadObjectActionOfObject">
            <summary>Sets the stub of IPlatformProvider.ExecuteOnFirstLoad(Object view, Action`1&lt;Object&gt; handler)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIPlatformProvider.ExecuteOnLayoutUpdatedObjectActionOfObject">
            <summary>Sets the stub of IPlatformProvider.ExecuteOnLayoutUpdated(Object view, Action`1&lt;Object&gt; handler)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIPlatformProvider.GetFirstNonGeneratedViewObject">
            <summary>Sets the stub of IPlatformProvider.GetFirstNonGeneratedView(Object view)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIPlatformProvider.GetViewCloseActionObjectICollectionOfObjectNullableOfBoolean">
            <summary>Sets the stub of IPlatformProvider.GetViewCloseAction(Object viewModel, ICollection`1&lt;Object&gt; views, Nullable`1&lt;Boolean&gt; dialogResult)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIPlatformProvider.InDesignModeGet">
            <summary>Sets the stub of IPlatformProvider.get_InDesignMode()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIPlatformProvider.OnUIThreadAction">
            <summary>Sets the stub of IPlatformProvider.OnUIThread(Action action)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIPlatformProvider.OnUIThreadAsyncAction">
            <summary>Sets the stub of IPlatformProvider.OnUIThreadAsync(Action action)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubIPlatformProvider.cm::Caliburn#Micro#IPlatformProvider#InDesignMode">
            <summary>Sets the stub of IPlatformProvider.get_InDesignMode()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIResult">
            <summary>Stub type of Caliburn.Micro.IResult</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIResult.#ctor">
            <summary>Initializes a new instance of type StubIResult</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIResult.cm::Caliburn#Micro#IResult#Execute(Caliburn.Micro.CoroutineExecutionContext)">
            <summary>Sets the stub of IResult.Execute(CoroutineExecutionContext context)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIResult.ExecuteCoroutineExecutionContext">
            <summary>Sets the stub of IResult.Execute(CoroutineExecutionContext context)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIResult`1">
            <summary>Stub type of Caliburn.Micro.IResult`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIResult`1.#ctor">
            <summary>Initializes a new instance of type StubIResult</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIResult`1.cm::Caliburn#Micro#IResult#Execute(Caliburn.Micro.CoroutineExecutionContext)">
            <summary>Sets the stub of IResult.Execute(CoroutineExecutionContext context)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIResult`1.ExecuteCoroutineExecutionContext">
            <summary>Sets the stub of IResult.Execute(CoroutineExecutionContext context)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIResult`1.ResultGet">
            <summary>Sets the stub of IResult`1.get_Result()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubIResult`1.cm::Caliburn#Micro#IResult{TResult}#Result">
            <summary>Sets the stub of IResult`1.get_Result()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIScreen">
            <summary>Stub type of Caliburn.Micro.IScreen</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIScreen.#ctor">
            <summary>Initializes a new instance of type StubIScreen</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIScreen.Activate">
            <summary>Sets the stub of IActivate.Activate()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIScreen.AttachBackingFieldToDisplayName">
            <summary>Attaches delegates to emulate StubIScreen.DisplayName as a property with a backing field.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIScreen.AttachBackingFieldToIsNotifying">
            <summary>Attaches delegates to emulate StubIScreen.IsNotifying as a property with a backing field.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIScreen.cm::Caliburn#Micro#IActivate#Activate">
            <summary>Sets the stub of IActivate.Activate()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIScreen.cm::Caliburn#Micro#IClose#TryClose(System.Nullable{System.Boolean})">
            <summary>Sets the stub of IClose.TryClose(Nullable`1&lt;Boolean&gt; dialogResult)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIScreen.cm::Caliburn#Micro#IDeactivate#Deactivate(System.Boolean)">
            <summary>Sets the stub of IDeactivate.Deactivate(Boolean close)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIScreen.cm::Caliburn#Micro#IGuardClose#CanClose(System.Action{System.Boolean})">
            <summary>Sets the stub of IGuardClose.CanClose(Action`1&lt;Boolean&gt; callback)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIScreen.cm::Caliburn#Micro#INotifyPropertyChangedEx#NotifyOfPropertyChange(System.String)">
            <summary>Sets the stub of INotifyPropertyChangedEx.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIScreen.cm::Caliburn#Micro#INotifyPropertyChangedEx#Refresh">
            <summary>Sets the stub of INotifyPropertyChangedEx.Refresh()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIScreen.CanCloseActionOfBoolean">
            <summary>Sets the stub of IGuardClose.CanClose(Action`1&lt;Boolean&gt; callback)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIScreen.DeactivateBoolean">
            <summary>Sets the stub of IDeactivate.Deactivate(Boolean close)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIScreen.DisplayNameGet">
            <summary>Sets the stub of IHaveDisplayName.get_DisplayName()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIScreen.DisplayNameSetString">
            <summary>Sets the stub of IHaveDisplayName.set_DisplayName(String value)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIScreen.IsActiveGet">
            <summary>Sets the stub of IActivate.get_IsActive()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIScreen.IsNotifyingGet">
            <summary>Sets the stub of INotifyPropertyChangedEx.get_IsNotifying()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIScreen.IsNotifyingSetBoolean">
            <summary>Sets the stub of INotifyPropertyChangedEx.set_IsNotifying(Boolean value)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIScreen.NotifyOfPropertyChangeString">
            <summary>Sets the stub of INotifyPropertyChangedEx.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIScreen.Refresh">
            <summary>Sets the stub of INotifyPropertyChangedEx.Refresh()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIScreen.TryCloseNullableOfBoolean">
            <summary>Sets the stub of IClose.TryClose(Nullable`1&lt;Boolean&gt; dialogResult)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubIScreen.cm::Caliburn#Micro#IHaveDisplayName#DisplayName">
            <summary>Sets the stub of IHaveDisplayName.get_DisplayName()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubIScreen.cm::Caliburn#Micro#IActivate#IsActive">
            <summary>Sets the stub of IActivate.get_IsActive()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubIScreen.cm::Caliburn#Micro#INotifyPropertyChangedEx#IsNotifying">
            <summary>Sets the stub of INotifyPropertyChangedEx.get_IsNotifying()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubIViewAware">
            <summary>Stub type of Caliburn.Micro.IViewAware</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIViewAware.#ctor">
            <summary>Initializes a new instance of type StubIViewAware</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIViewAware.AttachViewObjectObject">
            <summary>Sets the stub of IViewAware.AttachView(Object view, Object context)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIViewAware.cm::Caliburn#Micro#IViewAware#AttachView(System.Object,System.Object)">
            <summary>Sets the stub of IViewAware.AttachView(Object view, Object context)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubIViewAware.cm::Caliburn#Micro#IViewAware#GetView(System.Object)">
            <summary>Sets the stub of IViewAware.GetView(Object context)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubIViewAware.GetViewObject">
            <summary>Sets the stub of IViewAware.GetView(Object context)</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubOverrideCancelResultDecorator">
            <summary>Stub type of Caliburn.Micro.OverrideCancelResultDecorator</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubOverrideCancelResultDecorator.#ctor(Caliburn.Micro.IResult)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubOverrideCancelResultDecorator.InitializeStub">
            <summary>Initializes a new instance of type StubOverrideCancelResultDecorator</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubOverrideCancelResultDecorator.OnInnerResultCompleted(Caliburn.Micro.CoroutineExecutionContext,Caliburn.Micro.IResult,Caliburn.Micro.ResultCompletionEventArgs)">
            <summary>Sets the stub of OverrideCancelResultDecorator.OnInnerResultCompleted(CoroutineExecutionContext context, IResult innerResult, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubOverrideCancelResultDecorator.OnInnerResultCompletedCoroutineExecutionContextIResultResultCompletionEventArgs">
            <summary>Sets the stub of OverrideCancelResultDecorator.OnInnerResultCompleted(CoroutineExecutionContext context, IResult innerResult, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubOverrideCancelResultDecorator.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubOverrideCancelResultDecorator.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubOverrideCancelResultDecorator.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubPropertyChangedBase">
            <summary>Stub type of Caliburn.Micro.PropertyChangedBase</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubPropertyChangedBase.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubPropertyChangedBase.InitializeStub">
            <summary>Initializes a new instance of type StubPropertyChangedBase</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubPropertyChangedBase.NotifyOfPropertyChange(System.String)">
            <summary>Sets the stub of PropertyChangedBase.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubPropertyChangedBase.NotifyOfPropertyChangeString">
            <summary>Sets the stub of PropertyChangedBase.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubPropertyChangedBase.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubPropertyChangedBase.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubPropertyChangedBase.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubRescueResultDecorator`1">
            <summary>Stub type of Caliburn.Micro.RescueResultDecorator`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubRescueResultDecorator`1.#ctor(Caliburn.Micro.IResult,System.Func{`0,Caliburn.Micro.IResult},System.Boolean)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubRescueResultDecorator`1.InitializeStub">
            <summary>Initializes a new instance of type StubRescueResultDecorator</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubRescueResultDecorator`1.OnInnerResultCompleted(Caliburn.Micro.CoroutineExecutionContext,Caliburn.Micro.IResult,Caliburn.Micro.ResultCompletionEventArgs)">
            <summary>Sets the stub of RescueResultDecorator`1.OnInnerResultCompleted(CoroutineExecutionContext context, IResult innerResult, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubRescueResultDecorator`1.OnInnerResultCompletedCoroutineExecutionContextIResultResultCompletionEventArgs">
            <summary>Sets the stub of RescueResultDecorator`1.OnInnerResultCompleted(CoroutineExecutionContext context, IResult innerResult, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubRescueResultDecorator`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubRescueResultDecorator`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubRescueResultDecorator`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubResultCompletionEventArgs">
            <summary>Stub type of Caliburn.Micro.ResultCompletionEventArgs</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubResultCompletionEventArgs.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubResultCompletionEventArgs.InitializeStub">
            <summary>Initializes a new instance of type StubResultCompletionEventArgs</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubResultCompletionEventArgs.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubResultCompletionEventArgs.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubResultCompletionEventArgs.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubResultDecoratorBase">
            <summary>Stub type of Caliburn.Micro.ResultDecoratorBase</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubResultDecoratorBase.#ctor(Caliburn.Micro.IResult)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubResultDecoratorBase.InitializeStub">
            <summary>Initializes a new instance of type StubResultDecoratorBase</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubResultDecoratorBase.OnInnerResultCompleted(Caliburn.Micro.CoroutineExecutionContext,Caliburn.Micro.IResult,Caliburn.Micro.ResultCompletionEventArgs)">
            <summary>Sets the stub of ResultDecoratorBase.OnInnerResultCompleted(CoroutineExecutionContext context, IResult innerResult, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubResultDecoratorBase.OnInnerResultCompletedCoroutineExecutionContextIResultResultCompletionEventArgs">
            <summary>Sets the stub of ResultDecoratorBase.OnInnerResultCompleted(CoroutineExecutionContext context, IResult innerResult, ResultCompletionEventArgs args)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubResultDecoratorBase.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubResultDecoratorBase.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubResultDecoratorBase.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubScreen">
            <summary>Stub type of Caliburn.Micro.Screen</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubScreen.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubScreen.AttachBackingFieldToDisplayName">
            <summary>Attaches delegates to emulate StubScreen.DisplayName as a property with a backing field.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubScreen.AttachBackingFieldToParent">
            <summary>Attaches delegates to emulate StubScreen.Parent as a property with a backing field.</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubScreen.CanClose(System.Action{System.Boolean})">
            <summary>Sets the stub of Screen.CanClose(Action`1&lt;Boolean&gt; callback)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubScreen.CanCloseActionOfBoolean">
            <summary>Sets the stub of Screen.CanClose(Action`1&lt;Boolean&gt; callback)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubScreen.DisplayNameGet">
            <summary>Sets the stub of Screen.get_DisplayName()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubScreen.DisplayNameSetString">
            <summary>Sets the stub of Screen.set_DisplayName(String value)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubScreen.InitializeStub">
            <summary>Initializes a new instance of type StubScreen</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubScreen.NotifyOfPropertyChange(System.String)">
            <summary>Sets the stub of PropertyChangedBase.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubScreen.NotifyOfPropertyChangeString">
            <summary>Sets the stub of PropertyChangedBase.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubScreen.OnActivate">
            <summary>Sets the stub of Screen.OnActivate()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubScreen.OnActivate01">
            <summary>Sets the stub of Screen.OnActivate()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubScreen.OnDeactivate(System.Boolean)">
            <summary>Sets the stub of Screen.OnDeactivate(Boolean close)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubScreen.OnDeactivateBoolean">
            <summary>Sets the stub of Screen.OnDeactivate(Boolean close)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubScreen.OnInitialize">
            <summary>Sets the stub of Screen.OnInitialize()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubScreen.OnInitialize01">
            <summary>Sets the stub of Screen.OnInitialize()</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubScreen.OnViewAttached(System.Object,System.Object)">
            <summary>Sets the stub of ViewAware.OnViewAttached(Object view, Object context)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubScreen.OnViewAttachedObjectObject">
            <summary>Sets the stub of ViewAware.OnViewAttached(Object view, Object context)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubScreen.OnViewLoaded(System.Object)">
            <summary>Sets the stub of ViewAware.OnViewLoaded(Object view)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubScreen.OnViewLoadedObject">
            <summary>Sets the stub of ViewAware.OnViewLoaded(Object view)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubScreen.OnViewReady(System.Object)">
            <summary>Sets the stub of ViewAware.OnViewReady(Object view)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubScreen.OnViewReadyObject">
            <summary>Sets the stub of ViewAware.OnViewReady(Object view)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubScreen.ParentGet">
            <summary>Sets the stub of Screen.get_Parent()</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubScreen.ParentSetObject">
            <summary>Sets the stub of Screen.set_Parent(Object value)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubScreen.TryClose(System.Nullable{System.Boolean})">
            <summary>Sets the stub of Screen.TryClose(Nullable`1&lt;Boolean&gt; dialogResult)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubScreen.TryCloseNullableOfBoolean">
            <summary>Sets the stub of Screen.TryClose(Nullable`1&lt;Boolean&gt; dialogResult)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubScreen.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubScreen.DisplayName">
            <summary>Sets the stub of Screen.get_DisplayName()</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubScreen.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubScreen.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubScreen.Parent">
            <summary>Sets the stub of Screen.get_Parent()</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubSequentialResult">
            <summary>Stub type of Caliburn.Micro.SequentialResult</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubSequentialResult.#ctor(System.Collections.Generic.IEnumerator{Caliburn.Micro.IResult})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubSequentialResult.InitializeStub">
            <summary>Initializes a new instance of type StubSequentialResult</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubSequentialResult.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubSequentialResult.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubSequentialResult.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubSimpleContainer">
            <summary>Stub type of Caliburn.Micro.SimpleContainer</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubSimpleContainer.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubSimpleContainer.ActivateInstance(System.Type,System.Object[])">
            <summary>Sets the stub of SimpleContainer.ActivateInstance(Type type, Object[] args)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubSimpleContainer.ActivateInstanceTypeObjectArray">
            <summary>Sets the stub of SimpleContainer.ActivateInstance(Type type, Object[] args)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubSimpleContainer.InitializeStub">
            <summary>Initializes a new instance of type StubSimpleContainer</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubSimpleContainer.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubSimpleContainer.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubSimpleContainer.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubTaskResult">
            <summary>Stub type of Caliburn.Micro.TaskResult</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubTaskResult.#ctor(System.Threading.Tasks.Task)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubTaskResult.InitializeStub">
            <summary>Initializes a new instance of type StubTaskResult</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubTaskResult.OnCompleted(System.Threading.Tasks.Task)">
            <summary>Sets the stub of TaskResult.OnCompleted(Task task)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubTaskResult.OnCompletedTask">
            <summary>Sets the stub of TaskResult.OnCompleted(Task task)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubTaskResult.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubTaskResult.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubTaskResult.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubTaskResult`1">
            <summary>Stub type of Caliburn.Micro.TaskResult`1</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubTaskResult`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubTaskResult`1.InitializeStub">
            <summary>Initializes a new instance of type StubTaskResult</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubTaskResult`1.OnCompleted(System.Threading.Tasks.Task)">
            <summary>Sets the stub of TaskResult`1.OnCompleted(Task task)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubTaskResult`1.OnCompletedTask">
            <summary>Sets the stub of TaskResult`1.OnCompleted(Task task)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubTaskResult`1.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubTaskResult`1.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubTaskResult`1.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubViewAttachedEventArgs">
            <summary>Stub type of Caliburn.Micro.ViewAttachedEventArgs</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubViewAttachedEventArgs.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubViewAttachedEventArgs.InitializeStub">
            <summary>Initializes a new instance of type StubViewAttachedEventArgs</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubViewAttachedEventArgs.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubViewAttachedEventArgs.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubViewAttachedEventArgs.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:Caliburn.Micro.Fakes.StubViewAware">
            <summary>Stub type of Caliburn.Micro.ViewAware</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubViewAware.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubViewAware.InitializeStub">
            <summary>Initializes a new instance of type StubViewAware</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubViewAware.NotifyOfPropertyChange(System.String)">
            <summary>Sets the stub of PropertyChangedBase.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubViewAware.NotifyOfPropertyChangeString">
            <summary>Sets the stub of PropertyChangedBase.NotifyOfPropertyChange(String propertyName)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubViewAware.OnViewAttached(System.Object,System.Object)">
            <summary>Sets the stub of ViewAware.OnViewAttached(Object view, Object context)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubViewAware.OnViewAttachedObjectObject">
            <summary>Sets the stub of ViewAware.OnViewAttached(Object view, Object context)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubViewAware.OnViewLoaded(System.Object)">
            <summary>Sets the stub of ViewAware.OnViewLoaded(Object view)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubViewAware.OnViewLoadedObject">
            <summary>Sets the stub of ViewAware.OnViewLoaded(Object view)</summary>
        </member>
        <member name="M:Caliburn.Micro.Fakes.StubViewAware.OnViewReady(System.Object)">
            <summary>Sets the stub of ViewAware.OnViewReady(Object view)</summary>
        </member>
        <member name="F:Caliburn.Micro.Fakes.StubViewAware.OnViewReadyObject">
            <summary>Sets the stub of ViewAware.OnViewReady(Object view)</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubViewAware.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubViewAware.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:Caliburn.Micro.Fakes.StubViewAware.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
    </members>
</doc>
